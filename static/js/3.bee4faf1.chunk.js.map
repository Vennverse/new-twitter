{"version":3,"sources":["../node_modules/bs58/index.js","../../src/rpc/solanaRpcMiddlewares.ts","../../src/providers/injectedProviders/injectedProviderProxy.ts","../../src/providers/injectedProviders/phantom/providerHandlers.ts","../../src/providers/injectedProviders/phantom/phantomInjectedProvider.ts","../../src/providers/injectedProviders/torus/providerHandlers.ts","../../src/providers/injectedProviders/torus/torusInjectedProvider.ts","../../src/rpc/JrpcClient.ts","../../src/providers/privateKeyProvider/solanaPrivateKeyUtils.ts","../../src/providers/privateKeyProvider/solanaPrivateKeyProvider.ts","../../src/solanaWallet.ts","../../src/util/to-buffer.ts","../../node_modules/minimalistic-assert/index.js","../../node_modules/inherits/inherits_browser.js","../../node_modules/hash.js/lib/hash/utils.js","../../node_modules/hash.js/lib/hash/common.js","../../node_modules/hash.js/lib/hash/sha/common.js","../../node_modules/hash.js/lib/hash/sha/1.js","../../node_modules/hash.js/lib/hash/sha/256.js","../../node_modules/hash.js/lib/hash/sha/224.js","../../node_modules/hash.js/lib/hash/sha/512.js","../../node_modules/hash.js/lib/hash/sha/384.js","../../node_modules/hash.js/lib/hash/sha.js","../../node_modules/hash.js/lib/hash/ripemd.js","../../node_modules/hash.js/lib/hash/hmac.js","../../node_modules/hash.js/lib/hash.js","../../node_modules/@ethersproject/logger/lib.esm/index.js","../../node_modules/@ethersproject/logger/lib.esm/_version.js","../../node_modules/@ethersproject/bytes/lib.esm/_version.js","../../node_modules/@ethersproject/bytes/lib.esm/index.js","../../node_modules/@ethersproject/sha2/lib.esm/sha2.js","../../node_modules/@ethersproject/sha2/lib.esm/_version.js","../../src/util/borsh-schema.ts","../../src/publickey.ts","../../src/bpf-loader-deprecated.ts","../../src/transaction-constants.ts","../../src/layout.ts","../../src/util/shortvec-encoding.ts","../../src/message.ts","../../src/transaction.ts","../../src/util/assert.ts","../../src/sysvar.ts","../../src/util/send-and-confirm-transaction.ts","../../src/util/sleep.ts","../../src/instruction.ts","../../src/fee-calculator.ts","../../src/util/bigint.ts","../../src/nonce-account.ts","../../src/system-program.ts","../../src/loader.ts","../../src/bpf-loader.ts","../../src/compute-budget.ts","../../node_modules/cross-fetch/dist/browser-ponyfill.js","../../node_modules/fast-stable-stringify/index.js","../../src/errors.ts","../../src/util/tx-expiry-custom-errors.ts","../../src/connection.ts","../../src/keypair.ts","../../src/ed25519-program.ts","../../src/stake-program.ts","../../src/secp256k1-program.ts","../../src/validator-info.ts","../../src/vote-account.ts","../../src/vote-program.ts","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../../src/Layout.ts","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../node_modules/base-x/src/index.js","../node_modules/borsh/lib/index.js","../node_modules/text-encoding-utf-8/lib/encoding.lib.mjs","../node_modules/bigint-buffer/dist/browser.js","../node_modules/rpc-websockets/dist/index.browser.js","../node_modules/rpc-websockets/dist/lib/client/websocket.browser.js","../node_modules/rpc-websockets/dist/lib/client.js","../node_modules/jayson/lib/client/browser/index.js","../node_modules/jayson/lib/generateRequest.js","../node_modules/@solana/web3.js/node_modules/secp256k1/elliptic.js","../node_modules/@solana/web3.js/node_modules/secp256k1/lib/index.js","../node_modules/@solana/web3.js/node_modules/secp256k1/lib/elliptic.js","../../src/utils.ts","../../src/error.ts","../../src/struct.ts","../../src/structs/utilities.ts","../../src/structs/types.ts","../node_modules/@babel/runtime/helpers/esm/toArray.js","../../src/structs/coercions.ts"],"names":["basex","require","module","exports","createGetAccountsMiddleware","getAccounts","_ref","createAsyncMiddleware","request","response","next","method","Error","accounts","result","undefined","createRequestAccountsMiddleware","requestAccounts","_ref2","createGenericJRPCMiddleware","targetMethod","handler","createSolanaMiddleware","providerHandlers","signTransaction","signAndSendTransaction","signAllTransactions","signMessage","getPrivateKey","mergeMiddleware","createInjectedProviderProxyMiddleware","provider","req","res","_next","getPhantomHandlers","injectedProvider","publicKey","bs58","encode","toBytes","ethErrors","rpc","methodNotSupported","message","decode","params","txn","Transaction","from","transaction","_req$params","txRes","signature","_req$params2","_req$params3","length","invalidParams","txns","map","msg","decodedMsg","PhantomInjectedProvider","constructor","config","state","chainConfig","chainNamespace","CHAIN_NAMESPACES","SOLANA","_","Promise","resolve","solanaMiddleware","injectedProviderProxy","engine","JRPCEngine","push","providerFromEngine","updateProviderEngineProxy","lookupNetwork","update","chainId","BaseProvider","getTorusHandlers","data","toString","buf","Buffer","sendTx","_req$params4","_req$params5","messages","TorusInjectedProvider","handleInjectedProviderUpdate","setupEngine","custom","code","connectedChainId","connectedHexChainId","isHexStrict","parseInt","WalletInitializationError","rpcConnectionError","emit","on","configure","setupProvider","createChainIdMiddleware","end","createProviderConfigMiddleware","providerConfig","createJsonRpcClient","rpcTarget","fetchMiddleware","createFetchMiddleware","networkMiddleware","getProviderHandlers","privKey","getProviderEngineProxy","transactionGenerator","serializedTx","decodedTx","populate","Message","keyPairGenerator","Keypair","fromSecretKey","keyPair","toBase58","partialSign","signedMsg","nacl","sign","detached","secretKey","_providerEngineProxy","serialize","sig","_req$params6","_req$params7","signedTransactions","tx","SolanaPrivateKeyProvider","privateKey","bind","getChainSwitchMiddleware","getAccountMiddleware","getChainConfig","health","chainSwitchHandlers","addNewChainConfig","chainName","rpcUrls","blockExplorerUrls","nativeCurrency","addChain","ticker","symbol","tickerName","name","displayName","blockExplorer","switchSolanaChain","switchChain","createChainSwitchMiddleware","_ref3","accountHandlers","updatePrivatekey","updateAccount","createAccountMiddleware","_ref4","providerFactory","SolanaWallet","requireAllSignatures","signedTransaction","transactions","args","toBuffer","arr","isBuffer","Uint8Array","buffer","byteOffset","byteLength","minimalisticAssert","assert","val","equal","l","r","Object","create","inherits_browserModule","ctor","superCtor","super_","prototype","value","enumerable","writable","configurable","TempCtor","require$$0","inherits","require$$1","isSurrogatePair","i","charCodeAt","htonl","w","zero2","word","zero8","utils","enc","Array","isArray","slice","replace","p","c","endian","start","len","k","m","b","a","d","e","pos","ah","al","bh","lo","hi","bl","ch","cl","dh","dl","carry","eh","el","num","BlockHash","this","pending","pendingTotal","blockSize","outSize","hmacStrength","padLength","_delta8","_delta32","common","toArray","concat","join32","_update","digest","_pad","_digest","bytes","t","rotr32","ch32","x","y","z","maj32","p32","s","shaCommon","require$$2","rotl32","sum32","sum32_5","ft_1","sha1_K","SHA1","call","h","W","_1","toHex32","split32","require$$3","sum32_4","s0_256","s1_256","g0_256","g1_256","sha256_K","SHA256","_256","f","g","T1","T2","SHA224","_224","rotr64_hi","rotr64_lo","shr64_hi","shr64_lo","sum64","sum64_hi","sum64_lo","sum64_4_hi","sum64_4_lo","sum64_5_hi","sum64_5_lo","sha512_K","SHA512","_512","ch64_hi","xh","xl","yh","yl","zh","ch64_lo","zl","maj64_hi","maj64_lo","s0_512_hi","s0_512_lo","s1_512_hi","s1_512_lo","g0_512_hi","g0_512_lo","g1_512_hi","g1_512_lo","_prepareBlock","c0_hi","c0_lo","c1_hi","c1_lo","c2_hi","c2_lo","c3_hi","c3_lo","fh","fl","gh","gl","hh","hl","c4_hi","c4_lo","T1_hi","T1_lo","T2_hi","T2_lo","SHA384","_384","sha","require$$4","sum32_3","RIPEMD160","j","K","Kh","ripemd","A","B","C","D","E","Ah","Bh","Ch","Dh","Eh","T","rh","sh","Hmac","hash","key","Hash","inner","outer","_init","hmac","sha1","sha256","sha224","sha384","sha512","ripemd160","_permanentCensorErrors","_censorErrors","LogLevels","debug","info","warning","error","off","_logLevel","_globalLogger","LogLevel","ErrorCode","_normalizeError","missing","forEach","form","normalize","join","String","fromCharCode","_checkNormalize","HEX","Logger","version","defineProperty","logLevel","level","toLowerCase","throwArgumentError","console","log","apply","_log","levels","DEBUG","INFO","WARNING","makeError","errors","UNKNOWN_ERROR","messageDetails","keys","hex","JSON","stringify","reason","url","NUMERIC_FAULT","fault","CALL_EXCEPTION","INSUFFICIENT_FUNDS","MISSING_NEW","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","TRANSACTION_REPLACED","UNPREDICTABLE_GAS_LIMIT","throwError","INVALID_ARGUMENT","argument","condition","UNSUPPORTED_OPERATION","operation","count","expectedCount","MISSING_ARGUMENT","UNEXPECTED_ARGUMENT","target","kind","censorship","permanent","globalLogger","warn","logger","addSlice","array","arguments","isInteger","arrayify","options","checkSafeUint53","unshift","allowMissingPrefix","substring","toHexString","isHexable","match","isHexString","hexPad","v","isBytes","Struct","properties","assign","SOLANA_SCHEMA","deserialize","decodeUnchecked","deserializeUnchecked","Map","PublicKey","_bn","isPublicKeyData","decoded","BN","equals","eq","toJSON","toArrayLike","zeroPad","alloc","copy","fromPublicKey","seed","programId","seeds","TypeError","publicKeyBytes","is_on_curve","createProgramAddressSync","nonce","address","seedsWithNonce","err","findProgramAddressSync","isOnCurve","pubkeyData","default","set","fields","naclLowLevel","lowlevel","gf","chk","den","den2","den4","den6","neq25519","set25519","gf1","unpack25519","S","M","Z","pow2523","I","pack25519","crypto_verify_32","PACKET_DATA_SIZE","property","BufferLayout","rustString","rsl","_decode","_encode","rslShim","offset","str","chars","span","decodeLength","size","elem","shift","encodeLength","rem_len","TransactionStatus","header","accountKeys","recentBlockhash","instructions","indexToProgramIds","account","ix","programIdIndex","isAccountSigner","index","numRequiredSignatures","isAccountWritable","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","isProgramId","has","programIds","values","nonProgramIds","filter","numKeys","keyCount","shortvec","instruction","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","signDataLayout","Layout","signData","byteArray","accountCount","dataSlice","DEFAULT_SIGNATURE","fill","TransactionInstruction","opts","pubkey","isSigner","isWritable","signatures","feePayer","lastValidBlockHeight","nonceInfo","_message","_json","hasOwnProperty","newOpts","blockhash","oldOpts","nonceInstruction","signers","add","items","item","compileMessage","accountMetas","accountMeta","includes","sort","pubkeySorting","localeCompare","checkSigner","checkWritable","uniqueMetas","pubkeyString","uniqueIndex","findIndex","feePayerIndex","splice","payerMeta","signedKeys","unsignedKeys","indexOf","meta","invariant","keyIndex","_compile","every","pair","serializeMessage","getEstimatedFee","connection","getFeeForMessage","setSigners","seen","Set","uniqueSigners","signer","_partialSign","_addSignature","addSignature","sigpair","verifySignatures","_verifySignatures","verify","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","sigPubkeyPair","some","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","sendTransaction","confirmTransaction","status","sleep","ms","setTimeout","encodeData","type","allocLength","layout","layoutFields","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","u64","blob","encodeDecode","bigIntLayout","src","toBigIntLE","bigInt","toBufferLE","SYSTEM_INSTRUCTION_LAYOUTS","freeze","Create","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","SystemProgram","createAccount","lamports","space","fromPubkey","newAccountPubkey","transfer","BigInt","basePubkey","toPubkey","base","accountPubkey","createAccountWithSeed","createNonceAccount","noncePubkey","initParams","authorizedPubkey","nonceInitialize","authorized","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","newAuthorizedPubkey","allocate","Loader","getMinNumSignatures","Math","ceil","chunkSize","load","payer","program","getMinimumBalanceForRentExemption","balanceNeeded","getAccountInfo","programInfo","executable","owner","dataLayout","bytesLength","bytesLengthPadding","_rpcEndpoint","all","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","RequestUnits","RequestHeapFrame","SetComputeUnitLimit","SetComputeUnitPrice","ComputeBudgetProgram","requestUnits","requestHeapFrame","setComputeUnitLimit","setComputeUnitPrice","microLamports","global","self","__self__","F","fetch","DOMException","support","Symbol","Blob","viewClasses","isArrayBufferView","ArrayBuffer","isView","obj","normalizeName","test","normalizeValue","iteratorFor","iterator","done","Headers","headers","append","getOwnPropertyNames","consumed","body","bodyUsed","reject","fileReaderReady","reader","onload","onerror","readBlobAsArrayBuffer","FileReader","promise","readAsArrayBuffer","bufferClone","view","Body","_initBody","_bodyInit","_bodyText","isPrototypeOf","_bodyBlob","FormData","_bodyFormData","URLSearchParams","DataView","_bodyArrayBuffer","get","rejected","arrayBuffer","then","text","readAsText","readBlobAsText","readArrayBufferAsText","formData","json","parse","oldValue","callback","thisArg","entries","methods","Request","input","credentials","mode","signal","upcased","toUpperCase","normalizeMethod","referrer","trim","split","decodeURIComponent","parseHeaders","rawHeaders","line","parts","Response","bodyInit","ok","statusText","clone","redirectStatuses","redirect","RangeError","location","stack","init","aborted","xhr","XMLHttpRequest","abortXhr","abort","getAllResponseHeaders","responseURL","responseText","ontimeout","onabort","open","withCredentials","responseType","setRequestHeader","addEventListener","onreadystatechange","readyState","removeEventListener","send","polyfill","ponyfill","ctx","TransactionExpiredBlockheightExceededError","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","createRpcResult","union","pick","jsonrpc","id","unknown","optional","any","UnknownRpcResult","jsonRpcResult","schema","jsonRpcResultAndContext","context","slot","number","notificationResultAndContext","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetEpochInfoResult","nullable","epoch","effectiveSlot","amount","postBalance","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","slotsPerEpoch","leaderScheduleSlotOffset","warmup","boolean","firstNormalEpoch","firstNormalSlot","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","logs","rentEpoch","unitsConsumed","byIdentity","range","firstSlot","lastSlot","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","ParsedAccountDataResult","parsed","AccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","ProgramAccountInfoResult","active","inactive","memo","blockTime","subscription","SlotInfoResult","parent","root","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","VoteAccountInfoResult","gossip","tpu","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","ConfirmationStatus","current","delinquent","SignatureStatusResponse","confirmations","confirmationStatus","ConfirmedTransactionResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","ParsedConfirmedTransactionMetaResult","PerfSampleResult","previousBlockhash","parentSlot","rewards","rewardType","feeCalculator","lamportsPerSignature","numTransactions","numSlots","samplePeriodSecs","LogsResult","keypair","_keypair","skipValidation","TextEncoder","fromSeed","ED25519_INSTRUCTION_LAYOUT","Ed25519Program","createInstructionWithPublicKey","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPrivateKey","STAKE_CONFIG_ID","Lockup","unixTimestamp","custodian","STAKE_INSTRUCTION_LAYOUTS","Initialize","Authorize","Delegate","Split","Withdraw","Deactivate","Merge","AuthorizeWithSeed","StakeProgram","Staker","Withdrawer","initialize","stakePubkey","lockup","staker","withdrawer","delegate","authorize","stakeAuthorizationType","custodianPubkey","newAuthorized","authorizeWithSeed","authorityBase","authoritySeed","authorityOwner","splitInstruction","splitStakePubkey","splitWithSeed","merge","sourceStakePubKey","withdraw","deactivate","publicKeyCreate","secp256k1","ecdsaSign","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","publicKeyToEthAddress","sha3","keccak_256","recoveryId","createInstructionWithEthAddress","ethAddress","rawAddress","startsWith","substr","dataStart","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","recid","website","details","keybaseUsername","VOTE_INSTRUCTION_LAYOUTS","InitializeAccount","VoteProgram","Voter","initializeAccount","voteInit","authorizedVoter","authorizedWithdrawer","voteAuthorizationType","authorizedWithdrawerPubkey","ownKeys","object","enumerableOnly","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","_objectSpread2","source","getOwnPropertyDescriptors","defineProperties","checkUint8Array","uint8ArrayToBuffer","buffer_1","Number","rv","nameWithProperty","Class","layout_","boundConstructor_","makeDestinationObject","ExternalLayout","GreedyCount","elementSpan","rem","floor","OffsetLayout","UInt","UIntBE","readUIntLE","writeUIntLE","readUIntBE","writeUIntBE","Int","readIntLE","writeIntLE","IntBE","readIntBE","writeIntBE","V2E32","pow","divmodInt64","hi32","lo32","roundedInt64","NearUInt64","readUInt32LE","writeUInt32LE","NearUInt64BE","readUInt32BE","writeUInt32BE","NearInt64","readInt32LE","writeInt32LE","NearInt64BE","readInt32BE","writeInt32BE","Float","readFloatLE","writeFloatLE","FloatBE","readFloatBE","writeFloatBE","Double","readDoubleLE","writeDoubleLE","DoubleBE","readDoubleBE","writeDoubleBE","Sequence","elementLayout","isCount","idx","getSpan","elo","reduce","Structure","decodePrefixes","acc","fd","fsp","dest","firstOffset","lastOffset","lastWrote","fv","UnionDiscriminator","UnionLayoutDiscriminator","Union","discr","defaultLayout","discriminator","replicate","usesPrefixDiscriminator","registry","boundGetSourceVariant","defaultGetSourceVariant","getSourceVariant","configGetSourceVariant","gsv","vlo","getVariant","tag","dlo","clo","contentOffset","variant","VariantLayout","vb","fromArray","fixBitwiseResult","BitStructure","msb","_packedSetValue","_packedGetValue","bits","bf","BitField","Boolean","container","totalBits","usedBits","sum","valueMask","wordMask","wordValue","srcBuffer","write","CString","srcb","UTF8","maxSpan","Constant","_objectWithoutProperties","excluded","sourceKeys","sourceSymbolKeys","propertyIsEnumerable","_Buffer","ALPHABET","BASE_MAP","charAt","xc","BASE","LEADER","FACTOR","iFACTOR","decodeUnsafe","psz","zeroes","b256","it3","it4","vch","allocUnsafe","pbegin","pend","b58","it1","it2","repeat","__createBinding","o","k2","__setModuleDefault","__decorate","decorators","desc","Reflect","decorate","__importStar","mod","__esModule","__importDefault","BinaryReader","BinaryWriter","BorshError","baseDecode","baseEncode","bn_js_1","bs58_1","encoding","textDecoder","TextDecoder","fatal","INITIAL_LENGTH","fieldPath","originalMessage","fieldName","maybeResize","writeUInt8","writeUInt16LE","writeBuffer","subarray","writeU32","fn","handlingRangeError","propertyKey","propertyDescriptor","originalMethod","readUInt8","readUInt16LE","readBuffer","readU32","capitalizeFirstLetter","serializeField","fieldType","writer","writeFixedArray","writeArray","writeU8","serializeStruct","addToFieldPath","borshSerialize","structSchema","field","deserializeField","readFixedArray","readArray","readU8","deserializeStruct","classType","borshDeserialize","fieldValue","Writer","Reader","inRange","min","max","ToDictionary","Stream","tokens","endOfStream","read","prepend","token","pop","finished","decoderError","opt_code_point","DEFAULT_ENCODING","_streaming","_BOMseen","_decoder","_fatal","_ignoreBOM","_encoder","_options","UTF8Decoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","stream","bite","code_point","UTF8Encoder","temp","input_stream","code_points","cp","codePointsToString","opt_string","n","u","stringToCodePoints","reversed","reverse","toBigIntBE","width","padStart","toBufferBE","_interopRequireDefault","Client","_createClass2","_classCallCheck2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_websocket","_createSuper","Derived","hasNativeReflectConstruct","construct","sham","Proxy","valueOf","_isNativeReflectConstruct","Super","NewTarget","_CommonClient","_super","_ref$autoconnect","autoconnect","_ref$reconnect","reconnect","_ref$reconnect_interv","reconnect_interval","_ref$max_reconnects","max_reconnects","generate_request_id","WebSocketBrowserImpl","_EventEmitter","protocols","_this","socket","window","WebSocket","onopen","onmessage","event","onclose","optionsOrCallback","cb","close","listener","EventEmitter","_regenerator","_asyncToGenerator2","_typeof2","_eventemitter","__rest","CommonClient","webSocketFactory","_a","_a$autoconnect","_a$reconnect","_a$reconnect_interval","_a$max_reconnects","rest_options","queue","rpc_id","ready","current_reconnects","_connect","timeout","ws_opts","_this2","_login","mark","_callee","resp","wrap","_context","prev","sent","abrupt","stop","_x","_listMethods","_callee2","_context2","_this3","_subscribe","_callee3","_context3","_x2","_unsubscribe","_callee4","_context4","_x3","_this4","notification","listeners","clearTimeout","uuid","v4","generateRequest","ClientBrowser","callServer","reviver","replacer","generator","notificationIdNull","isBatch","hasCallback","_parseResponse","isError","cond","isUint8Array","numbers","isCompressed","toTypeString","getAssertedOutput","output","contextRandomize","privateKeyVerify","seckey","privateKeyNegate","privateKeyTweakAdd","tweak","privateKeyTweakMul","publicKeyVerify","compressed","publicKeyConvert","publicKeyNegate","publicKeyCombine","pubkeys","publicKeyTweakAdd","publicKeyTweakMul","signatureNormalize","signatureExport","outputlen","signatureImport","msg32","noncefn","ecdsaVerify","ecdsaRecover","ecdh","hashfn","xbuf","ybuf","ec","EC","ecparams","curve","loadPublicKey","first","cmp","toRed","red","redSqr","redIMul","redIAdd","redSqrt","isOdd","redNeg","pub","loadCompressedPublicKey","x3","redISub","isZero","loadUncompressedPublicKey","savePublicKey","point","bn","negate","sub","umod","iadd","isub","tweaked","imul","keyFromPrivate","getPublic","pairs","isInfinity","mul","nh","sigR","sigS","lenR","posR","lenS","posS","_noncefn","counter","canonical","pers","recoveryParam","sigObj","sigr","sigs","recoverPubKey","scalar","getX","getY","toFailures","run","StructError","failure","failures","cached","rest","path","isObject","print","shiftIterator","toFailure","struct","branch","refinement","mask","coercer","valid","validator","ts","refiner","props","is","validate","tuples","define","Element","constant","description","never","isNaN","Key","Value","Elements","Never","Structs","arrayWithHoles","iterableToArray","unsupportedIterableToArray","nonIterableRest"],"mappings":"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","file":"static/js/3.bee4faf1.chunk.js","sourcesContent":["var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n",null,null,null,null,null,null,null,null,null,null,"import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","module.exports = assert;\n\nfunction assert(val, msg) {\n  if (!val)\n    throw new Error(msg || 'Assertion failed');\n}\n\nassert.equal = function assertEqual(l, r, msg) {\n  if (l != r)\n    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));\n};\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n","'use strict';\n\nvar assert = require('minimalistic-assert');\nvar inherits = require('inherits');\n\nexports.inherits = inherits;\n\nfunction isSurrogatePair(msg, i) {\n  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n    return false;\n  }\n  if (i < 0 || i + 1 >= msg.length) {\n    return false;\n  }\n  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n}\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg === 'string') {\n    if (!enc) {\n      // Inspired by stringToUtf8ByteArray() in closure-library by Google\n      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n      // Apache License 2.0\n      // https://github.com/google/closure-library/blob/master/LICENSE\n      var p = 0;\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n        if (c < 128) {\n          res[p++] = c;\n        } else if (c < 2048) {\n          res[p++] = (c >> 6) | 192;\n          res[p++] = (c & 63) | 128;\n        } else if (isSurrogatePair(msg, i)) {\n          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n          res[p++] = (c >> 18) | 240;\n          res[p++] = ((c >> 12) & 63) | 128;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        } else {\n          res[p++] = (c >> 12) | 224;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        }\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0)\n        msg = '0' + msg;\n      for (i = 0; i < msg.length; i += 2)\n        res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n  }\n  return res;\n}\nexports.toArray = toArray;\n\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nexports.toHex = toHex;\n\nfunction htonl(w) {\n  var res = (w >>> 24) |\n            ((w >>> 8) & 0xff00) |\n            ((w << 8) & 0xff0000) |\n            ((w & 0xff) << 24);\n  return res >>> 0;\n}\nexports.htonl = htonl;\n\nfunction toHex32(msg, endian) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little')\n      w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n  return res;\n}\nexports.toHex32 = toHex32;\n\nfunction zero2(word) {\n  if (word.length === 1)\n    return '0' + word;\n  else\n    return word;\n}\nexports.zero2 = zero2;\n\nfunction zero8(word) {\n  if (word.length === 7)\n    return '0' + word;\n  else if (word.length === 6)\n    return '00' + word;\n  else if (word.length === 5)\n    return '000' + word;\n  else if (word.length === 4)\n    return '0000' + word;\n  else if (word.length === 3)\n    return '00000' + word;\n  else if (word.length === 2)\n    return '000000' + word;\n  else if (word.length === 1)\n    return '0000000' + word;\n  else\n    return word;\n}\nexports.zero8 = zero8;\n\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert(len % 4 === 0);\n  var res = new Array(len / 4);\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big')\n      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];\n    else\n      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];\n    res[i] = w >>> 0;\n  }\n  return res;\n}\nexports.join32 = join32;\n\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = (m >>> 16) & 0xff;\n      res[k + 2] = (m >>> 8) & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = (m >>> 16) & 0xff;\n      res[k + 1] = (m >>> 8) & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n  return res;\n}\nexports.split32 = split32;\n\nfunction rotr32(w, b) {\n  return (w >>> b) | (w << (32 - b));\n}\nexports.rotr32 = rotr32;\n\nfunction rotl32(w, b) {\n  return (w << b) | (w >>> (32 - b));\n}\nexports.rotl32 = rotl32;\n\nfunction sum32(a, b) {\n  return (a + b) >>> 0;\n}\nexports.sum32 = sum32;\n\nfunction sum32_3(a, b, c) {\n  return (a + b + c) >>> 0;\n}\nexports.sum32_3 = sum32_3;\n\nfunction sum32_4(a, b, c, d) {\n  return (a + b + c + d) >>> 0;\n}\nexports.sum32_4 = sum32_4;\n\nfunction sum32_5(a, b, c, d, e) {\n  return (a + b + c + d + e) >>> 0;\n}\nexports.sum32_5 = sum32_5;\n\nfunction sum64(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\nexports.sum64 = sum64;\n\nfunction sum64_hi(ah, al, bh, bl) {\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n}\nexports.sum64_hi = sum64_hi;\n\nfunction sum64_lo(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n}\nexports.sum64_lo = sum64_lo;\n\nfunction sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\nexports.sum64_4_hi = sum64_4_hi;\n\nfunction sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\nexports.sum64_4_lo = sum64_4_lo;\n\nfunction sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = (lo + el) >>> 0;\n  carry += lo < el ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\nexports.sum64_5_hi = sum64_5_hi;\n\nfunction sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n\n  return lo >>> 0;\n}\nexports.sum64_5_lo = sum64_5_lo;\n\nfunction rotr64_hi(ah, al, num) {\n  var r = (al << (32 - num)) | (ah >>> num);\n  return r >>> 0;\n}\nexports.rotr64_hi = rotr64_hi;\n\nfunction rotr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.rotr64_lo = rotr64_lo;\n\nfunction shr64_hi(ah, al, num) {\n  return ah >>> num;\n}\nexports.shr64_hi = shr64_hi;\n\nfunction shr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.shr64_lo = shr64_lo;\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction BlockHash() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\nexports.BlockHash = BlockHash;\n\nBlockHash.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils.toArray(msg, enc);\n  if (!this.pending)\n    this.pending = msg;\n  else\n    this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length;\n\n  // Enough data, try updating\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending;\n\n    // Process pending data in blocks\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0)\n      this.pending = null;\n\n    msg = utils.join32(msg, 0, msg.length - r, this.endian);\n    for (var i = 0; i < msg.length; i += this._delta32)\n      this._update(msg, i, i + this._delta32);\n  }\n\n  return this;\n};\n\nBlockHash.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert(this.pending === null);\n\n  return this._digest(enc);\n};\n\nBlockHash.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - ((len + this.padLength) % bytes);\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n  for (var i = 1; i < k; i++)\n    res[i] = 0;\n\n  // Append length\n  len <<= 3;\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n\n    for (t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n  }\n\n  return res;\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar rotr32 = utils.rotr32;\n\nfunction ft_1(s, x, y, z) {\n  if (s === 0)\n    return ch32(x, y, z);\n  if (s === 1 || s === 3)\n    return p32(x, y, z);\n  if (s === 2)\n    return maj32(x, y, z);\n}\nexports.ft_1 = ft_1;\n\nfunction ch32(x, y, z) {\n  return (x & y) ^ ((~x) & z);\n}\nexports.ch32 = ch32;\n\nfunction maj32(x, y, z) {\n  return (x & y) ^ (x & z) ^ (y & z);\n}\nexports.maj32 = maj32;\n\nfunction p32(x, y, z) {\n  return x ^ y ^ z;\n}\nexports.p32 = p32;\n\nfunction s0_256(x) {\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\nexports.s0_256 = s0_256;\n\nfunction s1_256(x) {\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\nexports.s1_256 = s1_256;\n\nfunction g0_256(x) {\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);\n}\nexports.g0_256 = g0_256;\n\nfunction g1_256(x) {\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);\n}\nexports.g1_256 = g1_256;\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_5 = utils.sum32_5;\nvar ft_1 = shaCommon.ft_1;\nvar BlockHash = common.BlockHash;\n\nvar sha1_K = [\n  0x5A827999, 0x6ED9EBA1,\n  0x8F1BBCDC, 0xCA62C1D6\n];\n\nfunction SHA1() {\n  if (!(this instanceof SHA1))\n    return new SHA1();\n\n  BlockHash.call(this);\n  this.h = [\n    0x67452301, 0xefcdab89, 0x98badcfe,\n    0x10325476, 0xc3d2e1f0 ];\n  this.W = new Array(80);\n}\n\nutils.inherits(SHA1, BlockHash);\nmodule.exports = SHA1;\n\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\n\nSHA1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n\n  for(; i < W.length; i++)\n    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n\n  for (i = 0; i < W.length; i++) {\n    var s = ~~(i / 20);\n    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n    e = d;\n    d = c;\n    c = rotl32(b, 30);\n    b = a;\n    a = t;\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n};\n\nSHA1.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\nvar assert = require('minimalistic-assert');\n\nvar sum32 = utils.sum32;\nvar sum32_4 = utils.sum32_4;\nvar sum32_5 = utils.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\n\nvar BlockHash = common.BlockHash;\n\nvar sha256_K = [\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n];\n\nfunction SHA256() {\n  if (!(this instanceof SHA256))\n    return new SHA256();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,\n    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n  ];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\nutils.inherits(SHA256, BlockHash);\nmodule.exports = SHA256;\n\nSHA256.blockSize = 512;\nSHA256.outSize = 256;\nSHA256.hmacStrength = 192;\nSHA256.padLength = 64;\n\nSHA256.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i++)\n    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n\n  assert(this.k.length === W.length);\n  for (i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n    var T2 = sum32(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = sum32(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32(T1, T2);\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n  this.h[5] = sum32(this.h[5], f);\n  this.h[6] = sum32(this.h[6], g);\n  this.h[7] = sum32(this.h[7], h);\n};\n\nSHA256.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar SHA256 = require('./256');\n\nfunction SHA224() {\n  if (!(this instanceof SHA224))\n    return new SHA224();\n\n  SHA256.call(this);\n  this.h = [\n    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];\n}\nutils.inherits(SHA224, SHA256);\nmodule.exports = SHA224;\n\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\n\nSHA224.prototype._digest = function digest(enc) {\n  // Just truncate output\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 7), 'big');\n  else\n    return utils.split32(this.h.slice(0, 7), 'big');\n};\n\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar assert = require('minimalistic-assert');\n\nvar rotr64_hi = utils.rotr64_hi;\nvar rotr64_lo = utils.rotr64_lo;\nvar shr64_hi = utils.shr64_hi;\nvar shr64_lo = utils.shr64_lo;\nvar sum64 = utils.sum64;\nvar sum64_hi = utils.sum64_hi;\nvar sum64_lo = utils.sum64_lo;\nvar sum64_4_hi = utils.sum64_4_hi;\nvar sum64_4_lo = utils.sum64_4_lo;\nvar sum64_5_hi = utils.sum64_5_hi;\nvar sum64_5_lo = utils.sum64_5_lo;\n\nvar BlockHash = common.BlockHash;\n\nvar sha512_K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n];\n\nfunction SHA512() {\n  if (!(this instanceof SHA512))\n    return new SHA512();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xf3bcc908,\n    0xbb67ae85, 0x84caa73b,\n    0x3c6ef372, 0xfe94f82b,\n    0xa54ff53a, 0x5f1d36f1,\n    0x510e527f, 0xade682d1,\n    0x9b05688c, 0x2b3e6c1f,\n    0x1f83d9ab, 0xfb41bd6b,\n    0x5be0cd19, 0x137e2179 ];\n  this.k = sha512_K;\n  this.W = new Array(160);\n}\nutils.inherits(SHA512, BlockHash);\nmodule.exports = SHA512;\n\nSHA512.blockSize = 1024;\nSHA512.outSize = 512;\nSHA512.hmacStrength = 192;\nSHA512.padLength = 128;\n\nSHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {\n  var W = this.W;\n\n  // 32 x 32bit words\n  for (var i = 0; i < 32; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i += 2) {\n    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2\n    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n    var c1_hi = W[i - 14];  // i - 7\n    var c1_lo = W[i - 13];\n    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15\n    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n    var c3_hi = W[i - 32];  // i - 16\n    var c3_lo = W[i - 31];\n\n    W[i] = sum64_4_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n    W[i + 1] = sum64_4_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n  }\n};\n\nSHA512.prototype._update = function _update(msg, start) {\n  this._prepareBlock(msg, start);\n\n  var W = this.W;\n\n  var ah = this.h[0];\n  var al = this.h[1];\n  var bh = this.h[2];\n  var bl = this.h[3];\n  var ch = this.h[4];\n  var cl = this.h[5];\n  var dh = this.h[6];\n  var dl = this.h[7];\n  var eh = this.h[8];\n  var el = this.h[9];\n  var fh = this.h[10];\n  var fl = this.h[11];\n  var gh = this.h[12];\n  var gl = this.h[13];\n  var hh = this.h[14];\n  var hl = this.h[15];\n\n  assert(this.k.length === W.length);\n  for (var i = 0; i < W.length; i += 2) {\n    var c0_hi = hh;\n    var c0_lo = hl;\n    var c1_hi = s1_512_hi(eh, el);\n    var c1_lo = s1_512_lo(eh, el);\n    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);\n    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n    var c3_hi = this.k[i];\n    var c3_lo = this.k[i + 1];\n    var c4_hi = W[i];\n    var c4_lo = W[i + 1];\n\n    var T1_hi = sum64_5_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n    var T1_lo = sum64_5_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n\n    c0_hi = s0_512_hi(ah, al);\n    c0_lo = s0_512_lo(ah, al);\n    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);\n    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n\n    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n\n    hh = gh;\n    hl = gl;\n\n    gh = fh;\n    gl = fl;\n\n    fh = eh;\n    fl = el;\n\n    eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n    el = sum64_lo(dl, dl, T1_hi, T1_lo);\n\n    dh = ch;\n    dl = cl;\n\n    ch = bh;\n    cl = bl;\n\n    bh = ah;\n    bl = al;\n\n    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n  }\n\n  sum64(this.h, 0, ah, al);\n  sum64(this.h, 2, bh, bl);\n  sum64(this.h, 4, ch, cl);\n  sum64(this.h, 6, dh, dl);\n  sum64(this.h, 8, eh, el);\n  sum64(this.h, 10, fh, fl);\n  sum64(this.h, 12, gh, gl);\n  sum64(this.h, 14, hh, hl);\n};\n\nSHA512.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n\nfunction ch64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ ((~xh) & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ ((~xl) & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 28);\n  var c1_hi = rotr64_hi(xl, xh, 2);  // 34\n  var c2_hi = rotr64_hi(xl, xh, 7);  // 39\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 28);\n  var c1_lo = rotr64_lo(xl, xh, 2);  // 34\n  var c2_lo = rotr64_lo(xl, xh, 7);  // 39\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 14);\n  var c1_hi = rotr64_hi(xh, xl, 18);\n  var c2_hi = rotr64_hi(xl, xh, 9);  // 41\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 14);\n  var c1_lo = rotr64_lo(xh, xl, 18);\n  var c2_lo = rotr64_lo(xl, xh, 9);  // 41\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 1);\n  var c1_hi = rotr64_hi(xh, xl, 8);\n  var c2_hi = shr64_hi(xh, xl, 7);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 1);\n  var c1_lo = rotr64_lo(xh, xl, 8);\n  var c2_lo = shr64_lo(xh, xl, 7);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 19);\n  var c1_hi = rotr64_hi(xl, xh, 29);  // 61\n  var c2_hi = shr64_hi(xh, xl, 6);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 19);\n  var c1_lo = rotr64_lo(xl, xh, 29);  // 61\n  var c2_lo = shr64_lo(xh, xl, 6);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n","'use strict';\n\nvar utils = require('../utils');\n\nvar SHA512 = require('./512');\n\nfunction SHA384() {\n  if (!(this instanceof SHA384))\n    return new SHA384();\n\n  SHA512.call(this);\n  this.h = [\n    0xcbbb9d5d, 0xc1059ed8,\n    0x629a292a, 0x367cd507,\n    0x9159015a, 0x3070dd17,\n    0x152fecd8, 0xf70e5939,\n    0x67332667, 0xffc00b31,\n    0x8eb44a87, 0x68581511,\n    0xdb0c2e0d, 0x64f98fa7,\n    0x47b5481d, 0xbefa4fa4 ];\n}\nutils.inherits(SHA384, SHA512);\nmodule.exports = SHA384;\n\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\n\nSHA384.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 12), 'big');\n  else\n    return utils.split32(this.h.slice(0, 12), 'big');\n};\n","'use strict';\n\nexports.sha1 = require('./sha/1');\nexports.sha224 = require('./sha/224');\nexports.sha256 = require('./sha/256');\nexports.sha384 = require('./sha/384');\nexports.sha512 = require('./sha/512');\n","'use strict';\n\nvar utils = require('./utils');\nvar common = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_3 = utils.sum32_3;\nvar sum32_4 = utils.sum32_4;\nvar BlockHash = common.BlockHash;\n\nfunction RIPEMD160() {\n  if (!(this instanceof RIPEMD160))\n    return new RIPEMD160();\n\n  BlockHash.call(this);\n\n  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];\n  this.endian = 'little';\n}\nutils.inherits(RIPEMD160, BlockHash);\nexports.ripemd160 = RIPEMD160;\n\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\n\nRIPEMD160.prototype._update = function update(msg, start) {\n  var A = this.h[0];\n  var B = this.h[1];\n  var C = this.h[2];\n  var D = this.h[3];\n  var E = this.h[4];\n  var Ah = A;\n  var Bh = B;\n  var Ch = C;\n  var Dh = D;\n  var Eh = E;\n  for (var j = 0; j < 80; j++) {\n    var T = sum32(\n      rotl32(\n        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),\n        s[j]),\n      E);\n    A = E;\n    E = D;\n    D = rotl32(C, 10);\n    C = B;\n    B = T;\n    T = sum32(\n      rotl32(\n        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),\n        sh[j]),\n      Eh);\n    Ah = Eh;\n    Eh = Dh;\n    Dh = rotl32(Ch, 10);\n    Ch = Bh;\n    Bh = T;\n  }\n  T = sum32_3(this.h[1], C, Dh);\n  this.h[1] = sum32_3(this.h[2], D, Eh);\n  this.h[2] = sum32_3(this.h[3], E, Ah);\n  this.h[3] = sum32_3(this.h[4], A, Bh);\n  this.h[4] = sum32_3(this.h[0], B, Ch);\n  this.h[0] = T;\n};\n\nRIPEMD160.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'little');\n  else\n    return utils.split32(this.h, 'little');\n};\n\nfunction f(j, x, y, z) {\n  if (j <= 15)\n    return x ^ y ^ z;\n  else if (j <= 31)\n    return (x & y) | ((~x) & z);\n  else if (j <= 47)\n    return (x | (~y)) ^ z;\n  else if (j <= 63)\n    return (x & z) | (y & (~z));\n  else\n    return x ^ (y | (~z));\n}\n\nfunction K(j) {\n  if (j <= 15)\n    return 0x00000000;\n  else if (j <= 31)\n    return 0x5a827999;\n  else if (j <= 47)\n    return 0x6ed9eba1;\n  else if (j <= 63)\n    return 0x8f1bbcdc;\n  else\n    return 0xa953fd4e;\n}\n\nfunction Kh(j) {\n  if (j <= 15)\n    return 0x50a28be6;\n  else if (j <= 31)\n    return 0x5c4dd124;\n  else if (j <= 47)\n    return 0x6d703ef3;\n  else if (j <= 63)\n    return 0x7a6d76e9;\n  else\n    return 0x00000000;\n}\n\nvar r = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,\n  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,\n  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13\n];\n\nvar rh = [\n  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,\n  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,\n  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,\n  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,\n  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11\n];\n\nvar s = [\n  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,\n  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,\n  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,\n  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,\n  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6\n];\n\nvar sh = [\n  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,\n  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,\n  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,\n  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,\n  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11\n];\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction Hmac(hash, key, enc) {\n  if (!(this instanceof Hmac))\n    return new Hmac(hash, key, enc);\n  this.Hash = hash;\n  this.blockSize = hash.blockSize / 8;\n  this.outSize = hash.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n\n  this._init(utils.toArray(key, enc));\n}\nmodule.exports = Hmac;\n\nHmac.prototype._init = function init(key) {\n  // Shorten key, if needed\n  if (key.length > this.blockSize)\n    key = new this.Hash().update(key).digest();\n  assert(key.length <= this.blockSize);\n\n  // Add padding to key\n  for (var i = key.length; i < this.blockSize; i++)\n    key.push(0);\n\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x36;\n  this.inner = new this.Hash().update(key);\n\n  // 0x36 ^ 0x5c = 0x6a\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x6a;\n  this.outer = new this.Hash().update(key);\n};\n\nHmac.prototype.update = function update(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\n\nHmac.prototype.digest = function digest(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};\n","var hash = exports;\n\nhash.utils = require('./hash/utils');\nhash.common = require('./hash/common');\nhash.sha = require('./hash/sha');\nhash.ripemd = require('./hash/ripemd');\nhash.hmac = require('./hash/hmac');\n\n// Proxy hash functions to the main object\nhash.sha1 = hash.sha.sha1;\nhash.sha256 = hash.sha.sha256;\nhash.sha224 = hash.sha.sha224;\nhash.sha384 = hash.sha.sha384;\nhash.sha512 = hash.sha.sha512;\nhash.ripemd160 = hash.ripemd.ripemd160;\n","\"use strict\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\nimport { version } from \"./_version\";\nlet _globalLogger = null;\nfunction _checkNormalize() {\n    try {\n        const missing = [];\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                }\n                ;\n            }\n            catch (error) {\n                missing.push(form);\n            }\n        });\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\");\n        }\n    }\n    catch (error) {\n        return error.message;\n    }\n    return null;\n}\nconst _normalizeError = _checkNormalize();\nexport var LogLevel;\n(function (LogLevel) {\n    LogLevel[\"DEBUG\"] = \"DEBUG\";\n    LogLevel[\"INFO\"] = \"INFO\";\n    LogLevel[\"WARNING\"] = \"WARNING\";\n    LogLevel[\"ERROR\"] = \"ERROR\";\n    LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nexport var ErrorCode;\n(function (ErrorCode) {\n    ///////////////////\n    // Generic Errors\n    // Unknown Error\n    ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    // Not Implemented\n    ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n    // Unsupported Operation\n    //   - operation\n    ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n    // Some sort of bad response from the server\n    ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n    // Timeout\n    ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n    ///////////////////\n    // Operational  Errors\n    // Buffer Overrun\n    ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n    ///////////////////\n    // Argument Errors\n    // Missing new operator to an object\n    //  - name: The name of the class\n    ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n    ///////////////////\n    // Blockchain Errors\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n})(ErrorCode || (ErrorCode = {}));\n;\nconst HEX = \"0123456789abcdef\";\nexport class Logger {\n    constructor(version) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n    _log(logLevel, args) {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) {\n            return;\n        }\n        console.log.apply(console, args);\n    }\n    debug(...args) {\n        this._log(Logger.levels.DEBUG, args);\n    }\n    info(...args) {\n        this._log(Logger.levels.INFO, args);\n    }\n    warn(...args) {\n        this._log(Logger.levels.WARNING, args);\n    }\n    makeError(message, code, params) {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, {});\n        }\n        if (!code) {\n            code = Logger.errors.UNKNOWN_ERROR;\n        }\n        if (!params) {\n            params = {};\n        }\n        const messageDetails = [];\n        Object.keys(params).forEach((key) => {\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for (let i = 0; i < value.length; i++) {\n                        hex += HEX[value[i] >> 4];\n                        hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                }\n                else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            }\n            catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${code}`);\n        messageDetails.push(`version=${this.version}`);\n        const reason = message;\n        let url = \"\";\n        switch (code) {\n            case ErrorCode.NUMERIC_FAULT: {\n                url = \"NUMERIC_FAULT\";\n                const fault = message;\n                switch (fault) {\n                    case \"overflow\":\n                    case \"underflow\":\n                    case \"division-by-zero\":\n                        url += \"-\" + fault;\n                        break;\n                    case \"negative-power\":\n                    case \"negative-width\":\n                        url += \"-unsupported\";\n                        break;\n                    case \"unbound-bitwise-result\":\n                        url += \"-unbound-result\";\n                        break;\n                }\n                break;\n            }\n            case ErrorCode.CALL_EXCEPTION:\n            case ErrorCode.INSUFFICIENT_FUNDS:\n            case ErrorCode.MISSING_NEW:\n            case ErrorCode.NONCE_EXPIRED:\n            case ErrorCode.REPLACEMENT_UNDERPRICED:\n            case ErrorCode.TRANSACTION_REPLACED:\n            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n                url = code;\n                break;\n        }\n        if (url) {\n            message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n        }\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n        // @TODO: Any??\n        const error = new Error(message);\n        error.reason = reason;\n        error.code = code;\n        Object.keys(params).forEach(function (key) {\n            error[key] = params[key];\n        });\n        return error;\n    }\n    throwError(message, code, params) {\n        throw this.makeError(message, code, params);\n    }\n    throwArgumentError(message, name, value) {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n    assert(condition, message, code, params) {\n        if (!!condition) {\n            return;\n        }\n        this.throwError(message, code, params);\n    }\n    assertArgument(condition, message, name, value) {\n        if (!!condition) {\n            return;\n        }\n        this.throwArgumentError(message, name, value);\n    }\n    checkNormalize(message) {\n        if (message == null) {\n            message = \"platform missing String.prototype.normalize\";\n        }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n    checkSafeUint53(value, message) {\n        if (typeof (value) !== \"number\") {\n            return;\n        }\n        if (message == null) {\n            message = \"value not safe\";\n        }\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n    checkArgumentCount(count, expectedCount, message) {\n        if (message) {\n            message = \": \" + message;\n        }\n        else {\n            message = \"\";\n        }\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n    checkNew(target, kind) {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    checkAbstract(target, kind) {\n        if (target === kind) {\n            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: \"new\" });\n        }\n        else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    static globalLogger() {\n        if (!_globalLogger) {\n            _globalLogger = new Logger(version);\n        }\n        return _globalLogger;\n    }\n    static setCensorship(censorship, permanent) {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        if (_permanentCensorErrors) {\n            if (!censorship) {\n                return;\n            }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n    static setLogLevel(logLevel) {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n    static from(version) {\n        return new Logger(version);\n    }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\n//# sourceMappingURL=index.js.map","export const version = \"logger/5.6.0\";\n//# sourceMappingURL=_version.js.map","export const version = \"bytes/5.6.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n///////////////////////////////\nfunction isHexable(value) {\n    return !!(value.toHexString);\n}\nfunction addSlice(array) {\n    if (array.slice) {\n        return array;\n    }\n    array.slice = function () {\n        const args = Array.prototype.slice.call(arguments);\n        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n    };\n    return array;\n}\nexport function isBytesLike(value) {\n    return ((isHexString(value) && !(value.length % 2)) || isBytes(value));\n}\nfunction isInteger(value) {\n    return (typeof (value) === \"number\" && value == value && (value % 1) === 0);\n}\nexport function isBytes(value) {\n    if (value == null) {\n        return false;\n    }\n    if (value.constructor === Uint8Array) {\n        return true;\n    }\n    if (typeof (value) === \"string\") {\n        return false;\n    }\n    if (!isInteger(value.length) || value.length < 0) {\n        return false;\n    }\n    for (let i = 0; i < value.length; i++) {\n        const v = value[i];\n        if (!isInteger(v) || v < 0 || v >= 256) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function arrayify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid arrayify value\");\n        const result = [];\n        while (value) {\n            result.unshift(value & 0xff);\n            value = parseInt(String(value / 256));\n        }\n        if (result.length === 0) {\n            result.push(0);\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        value = value.toHexString();\n    }\n    if (isHexString(value)) {\n        let hex = value.substring(2);\n        if (hex.length % 2) {\n            if (options.hexPad === \"left\") {\n                hex = \"0x0\" + hex.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                hex += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        const result = [];\n        for (let i = 0; i < hex.length; i += 2) {\n            result.push(parseInt(hex.substring(i, i + 2), 16));\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (isBytes(value)) {\n        return addSlice(new Uint8Array(value));\n    }\n    return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\nexport function concat(items) {\n    const objects = items.map(item => arrayify(item));\n    const length = objects.reduce((accum, item) => (accum + item.length), 0);\n    const result = new Uint8Array(length);\n    objects.reduce((offset, object) => {\n        result.set(object, offset);\n        return offset + object.length;\n    }, 0);\n    return addSlice(result);\n}\nexport function stripZeros(value) {\n    let result = arrayify(value);\n    if (result.length === 0) {\n        return result;\n    }\n    // Find the first non-zero entry\n    let start = 0;\n    while (start < result.length && result[start] === 0) {\n        start++;\n    }\n    // If we started with zeros, strip them\n    if (start) {\n        result = result.slice(start);\n    }\n    return result;\n}\nexport function zeroPad(value, length) {\n    value = arrayify(value);\n    if (value.length > length) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[0]);\n    }\n    const result = new Uint8Array(length);\n    result.set(value, length - value.length);\n    return addSlice(result);\n}\nexport function isHexString(value, length) {\n    if (typeof (value) !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false;\n    }\n    if (length && value.length !== 2 + 2 * length) {\n        return false;\n    }\n    return true;\n}\nconst HexCharacters = \"0123456789abcdef\";\nexport function hexlify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid hexlify value\");\n        let hex = \"\";\n        while (value) {\n            hex = HexCharacters[value & 0xf] + hex;\n            value = Math.floor(value / 16);\n        }\n        if (hex.length) {\n            if (hex.length % 2) {\n                hex = \"0\" + hex;\n            }\n            return \"0x\" + hex;\n        }\n        return \"0x00\";\n    }\n    if (typeof (value) === \"bigint\") {\n        value = value.toString(16);\n        if (value.length % 2) {\n            return (\"0x0\" + value);\n        }\n        return \"0x\" + value;\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        return value.toHexString();\n    }\n    if (isHexString(value)) {\n        if (value.length % 2) {\n            if (options.hexPad === \"left\") {\n                value = \"0x0\" + value.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                value += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        return value.toLowerCase();\n    }\n    if (isBytes(value)) {\n        let result = \"0x\";\n        for (let i = 0; i < value.length; i++) {\n            let v = value[i];\n            result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n        }\n        return result;\n    }\n    return logger.throwArgumentError(\"invalid hexlify value\", \"value\", value);\n}\n/*\nfunction unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {\n    if (typeof(value) === \"string\" && value.length % 2 && value.substring(0, 2) === \"0x\") {\n        return \"0x0\" + value.substring(2);\n    }\n    return value;\n}\n*/\nexport function hexDataLength(data) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        return null;\n    }\n    return (data.length - 2) / 2;\n}\nexport function hexDataSlice(data, offset, endOffset) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        logger.throwArgumentError(\"invalid hexData\", \"value\", data);\n    }\n    offset = 2 + 2 * offset;\n    if (endOffset != null) {\n        return \"0x\" + data.substring(offset, 2 + 2 * endOffset);\n    }\n    return \"0x\" + data.substring(offset);\n}\nexport function hexConcat(items) {\n    let result = \"0x\";\n    items.forEach((item) => {\n        result += hexlify(item).substring(2);\n    });\n    return result;\n}\nexport function hexValue(value) {\n    const trimmed = hexStripZeros(hexlify(value, { hexPad: \"left\" }));\n    if (trimmed === \"0x\") {\n        return \"0x0\";\n    }\n    return trimmed;\n}\nexport function hexStripZeros(value) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    value = value.substring(2);\n    let offset = 0;\n    while (offset < value.length && value[offset] === \"0\") {\n        offset++;\n    }\n    return \"0x\" + value.substring(offset);\n}\nexport function hexZeroPad(value, length) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    else if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    if (value.length > 2 * length + 2) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[1]);\n    }\n    while (value.length < 2 * length + 2) {\n        value = \"0x0\" + value.substring(2);\n    }\n    return value;\n}\nexport function splitSignature(signature) {\n    const result = {\n        r: \"0x\",\n        s: \"0x\",\n        _vs: \"0x\",\n        recoveryParam: 0,\n        v: 0,\n        yParityAndS: \"0x\",\n        compact: \"0x\"\n    };\n    if (isBytesLike(signature)) {\n        let bytes = arrayify(signature);\n        // Get the r, s and v\n        if (bytes.length === 64) {\n            // EIP-2098; pull the v from the top bit of s and clear it\n            result.v = 27 + (bytes[32] >> 7);\n            bytes[32] &= 0x7f;\n            result.r = hexlify(bytes.slice(0, 32));\n            result.s = hexlify(bytes.slice(32, 64));\n        }\n        else if (bytes.length === 65) {\n            result.r = hexlify(bytes.slice(0, 32));\n            result.s = hexlify(bytes.slice(32, 64));\n            result.v = bytes[64];\n        }\n        else {\n            logger.throwArgumentError(\"invalid signature string\", \"signature\", signature);\n        }\n        // Allow a recid to be used as the v\n        if (result.v < 27) {\n            if (result.v === 0 || result.v === 1) {\n                result.v += 27;\n            }\n            else {\n                logger.throwArgumentError(\"signature invalid v byte\", \"signature\", signature);\n            }\n        }\n        // Compute recoveryParam from v\n        result.recoveryParam = 1 - (result.v % 2);\n        // Compute _vs from recoveryParam and s\n        if (result.recoveryParam) {\n            bytes[32] |= 0x80;\n        }\n        result._vs = hexlify(bytes.slice(32, 64));\n    }\n    else {\n        result.r = signature.r;\n        result.s = signature.s;\n        result.v = signature.v;\n        result.recoveryParam = signature.recoveryParam;\n        result._vs = signature._vs;\n        // If the _vs is available, use it to populate missing s, v and recoveryParam\n        // and verify non-missing s, v and recoveryParam\n        if (result._vs != null) {\n            const vs = zeroPad(arrayify(result._vs), 32);\n            result._vs = hexlify(vs);\n            // Set or check the recid\n            const recoveryParam = ((vs[0] >= 128) ? 1 : 0);\n            if (result.recoveryParam == null) {\n                result.recoveryParam = recoveryParam;\n            }\n            else if (result.recoveryParam !== recoveryParam) {\n                logger.throwArgumentError(\"signature recoveryParam mismatch _vs\", \"signature\", signature);\n            }\n            // Set or check the s\n            vs[0] &= 0x7f;\n            const s = hexlify(vs);\n            if (result.s == null) {\n                result.s = s;\n            }\n            else if (result.s !== s) {\n                logger.throwArgumentError(\"signature v mismatch _vs\", \"signature\", signature);\n            }\n        }\n        // Use recid and v to populate each other\n        if (result.recoveryParam == null) {\n            if (result.v == null) {\n                logger.throwArgumentError(\"signature missing v and recoveryParam\", \"signature\", signature);\n            }\n            else if (result.v === 0 || result.v === 1) {\n                result.recoveryParam = result.v;\n            }\n            else {\n                result.recoveryParam = 1 - (result.v % 2);\n            }\n        }\n        else {\n            if (result.v == null) {\n                result.v = 27 + result.recoveryParam;\n            }\n            else {\n                const recId = (result.v === 0 || result.v === 1) ? result.v : (1 - (result.v % 2));\n                if (result.recoveryParam !== recId) {\n                    logger.throwArgumentError(\"signature recoveryParam mismatch v\", \"signature\", signature);\n                }\n            }\n        }\n        if (result.r == null || !isHexString(result.r)) {\n            logger.throwArgumentError(\"signature missing or invalid r\", \"signature\", signature);\n        }\n        else {\n            result.r = hexZeroPad(result.r, 32);\n        }\n        if (result.s == null || !isHexString(result.s)) {\n            logger.throwArgumentError(\"signature missing or invalid s\", \"signature\", signature);\n        }\n        else {\n            result.s = hexZeroPad(result.s, 32);\n        }\n        const vs = arrayify(result.s);\n        if (vs[0] >= 128) {\n            logger.throwArgumentError(\"signature s out of range\", \"signature\", signature);\n        }\n        if (result.recoveryParam) {\n            vs[0] |= 0x80;\n        }\n        const _vs = hexlify(vs);\n        if (result._vs) {\n            if (!isHexString(result._vs)) {\n                logger.throwArgumentError(\"signature invalid _vs\", \"signature\", signature);\n            }\n            result._vs = hexZeroPad(result._vs, 32);\n        }\n        // Set or check the _vs\n        if (result._vs == null) {\n            result._vs = _vs;\n        }\n        else if (result._vs !== _vs) {\n            logger.throwArgumentError(\"signature _vs mismatch v and s\", \"signature\", signature);\n        }\n    }\n    result.yParityAndS = result._vs;\n    result.compact = result.r + result.yParityAndS.substring(2);\n    return result;\n}\nexport function joinSignature(signature) {\n    signature = splitSignature(signature);\n    return hexlify(concat([\n        signature.r,\n        signature.s,\n        (signature.recoveryParam ? \"0x1c\" : \"0x1b\")\n    ]));\n}\n//# sourceMappingURL=index.js.map","\"use strict\";\nimport hash from \"hash.js\";\n//const _ripemd160 = _hash.ripemd160;\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { SupportedAlgorithm } from \"./types\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport function ripemd160(data) {\n    return \"0x\" + (hash.ripemd160().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha256(data) {\n    return \"0x\" + (hash.sha256().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha512(data) {\n    return \"0x\" + (hash.sha512().update(arrayify(data)).digest(\"hex\"));\n}\nexport function computeHmac(algorithm, key, data) {\n    if (!SupportedAlgorithm[algorithm]) {\n        logger.throwError(\"unsupported algorithm \" + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"hmac\",\n            algorithm: algorithm\n        });\n    }\n    return \"0x\" + hash.hmac(hash[algorithm], arrayify(key)).update(arrayify(data)).digest(\"hex\");\n}\n//# sourceMappingURL=sha2.js.map","export const version = \"sha2/5.6.0\";\n//# sourceMappingURL=_version.js.map","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport nacl from 'tweetnacl';\nimport {sha256} from '@ethersproject/sha2';\n\nimport {Struct, SOLANA_SCHEMA} from './util/borsh-schema';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Buffer\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != 32) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Default public key value. (All zeros)\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const hash = sha256(new Uint8Array(buffer)).slice(2);\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    let hash = sha256(new Uint8Array(buffer)).slice(2);\n    let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return is_on_curve(pubkey.toBytes()) == 1;\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n\n// @ts-ignore\nlet naclLowLevel = nacl.lowlevel;\n\n// Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\nfunction is_on_curve(p: any) {\n  var r = [\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n  ];\n\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([\n  0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7,\n  0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83,\n]);\nfunction neq25519(a: any, b: any) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PACKET_DATA_SIZE} from './transaction-constants';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * The message header, identifying signed and read-only account\n */\nexport type MessageHeader = {\n  /**\n   * The number of signatures required for this message to be considered valid. The\n   * signatures must match the first `numRequiredSignatures` of `accountKeys`.\n   */\n  numRequiredSignatures: number;\n  /** The last `numReadonlySignedAccounts` of the signed keys are read-only accounts */\n  numReadonlySignedAccounts: number;\n  /** The last `numReadonlySignedAccounts` of the unsigned keys are read-only accounts */\n  numReadonlyUnsignedAccounts: number;\n};\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nconst PUBKEY_LENGTH = 32;\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    return (\n      index <\n        this.header.numRequiredSignatures -\n          this.header.numReadonlySignedAccounts ||\n      (index >= this.header.numRequiredSignatures &&\n        index <\n          this.accountKeys.length - this.header.numReadonlyUnsignedAccounts)\n    );\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift() as number;\n    const numReadonlySignedAccounts = byteArray.shift() as number;\n    const numReadonlyUnsignedAccounts = byteArray.shift() as number;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import nacl from 'tweetnacl';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {\n  PACKET_DATA_SIZE,\n  SIGNATURE_LENGTH_IN_BYTES,\n} from './transaction-constants';\nimport {Connection} from './connection';\nimport {Message} from './message';\nimport {PublicKey} from './publickey';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\nimport invariant from './util/assert';\nimport type {Signer} from './keypair';\nimport type {Blockhash} from './blockhash';\nimport type {CompiledInstruction} from './message';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?: TransactionBlockhashCtor | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    } else if (\n      Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')\n    ) {\n      const newOpts = opts as TransactionBlockhashCtor;\n      Object.assign(this, newOpts);\n      this.recentBlockhash = newOpts.blockhash;\n      this.lastValidBlockHeight = newOpts.lastValidBlockHeight;\n    } else {\n      const oldOpts = opts as TransactionCtorFields_DEPRECATED;\n      Object.assign(this, oldOpts);\n      this.recentBlockhash = oldOpts.recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    const {nonceInfo} = this;\n    if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n      this.recentBlockhash = nonceInfo.nonce;\n      this.instructions.unshift(nonceInfo.nonceInstruction);\n    }\n    const {recentBlockhash} = this;\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (this.instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < this.instructions.length; i++) {\n      if (this.instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    accountMetas.sort(function (x, y) {\n      const pubkeySorting = x.pubkey\n        .toBase58()\n        .localeCompare(y.pubkey.toBase58());\n      const checkSigner = x.isSigner === y.isSigner ? 0 : x.isSigner ? -1 : 1;\n      const checkWritable =\n        x.isWritable === y.isWritable ? pubkeySorting : x.isWritable ? -1 : 1;\n      return checkSigner || checkWritable;\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const instructions: CompiledInstruction[] = this.instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    instructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (\n          !nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status =\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n      ? (\n          await connection.confirmTransaction(\n            {\n              signature: signature,\n              blockhash: transaction.recentBlockhash,\n              lastValidBlockHeight: transaction.lastValidBlockHeight,\n            },\n            options && options.commitment,\n          )\n        ).value\n      : (\n          await connection.confirmTransaction(\n            signature,\n            options && options.commitment,\n          )\n        ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {NONCE_ACCOUNT_LENGTH} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\nimport {u64} from './util/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './system-program';\nimport {IInstructionInputData} from './instruction';\nimport {PACKET_DATA_SIZE} from './transaction-constants';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport {u64} from './util/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","var global = typeof self !== 'undefined' ? self : this;\nvar __self__ = (function () {\nfunction F() {\nthis.fetch = false;\nthis.DOMException = global.DOMException\n}\nF.prototype = global;\nreturn new F();\n})();\n(function(self) {\n\nvar irrelevant = (function (exports) {\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob:\n      'FileReader' in self &&\n      'Blob' in self &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : 'OK';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = self.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options));\n      };\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.onabort = function() {\n        reject(new exports.DOMException('Aborted', 'AbortError'));\n      };\n\n      xhr.open(request.method, request.url, true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!self.fetch) {\n    self.fetch = fetch;\n    self.Headers = Headers;\n    self.Request = Request;\n    self.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n\n})({});\n})(__self__);\n__self__.fetch.ponyfill = true;\n// Remove \"polyfill\" property added by whatwg-fetch\ndelete __self__.fetch.polyfill;\n// Choose between native implementation (global) or custom implementation (__self__)\n// var ctx = global.fetch ? global : __self__;\nvar ctx = __self__; // this line disable service worker support temporarily\nexports = ctx.fetch // To enable: import fetch from 'cross-fetch'\nexports.default = ctx.fetch // For TypeScript consumers without esModuleInterop.\nexports.fetch = ctx.fetch // To enable: import {fetch} from 'cross-fetch'\nexports.Headers = ctx.Headers\nexports.Request = ctx.Request\nexports.Response = ctx.Response\nmodule.exports = exports\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport crossFetch from 'cross-fetch';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\n\nimport {AgentManager} from './agent-manager';\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError} from './errors';\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {Transaction, TransactionStatus} from './transaction';\nimport {Message} from './message';\nimport assert from './util/assert';\nimport {sleep} from './util/sleep';\nimport {toBuffer} from './util/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredTimeoutError,\n} from './util/tx-expiry-custom-errors';\nimport {makeWebsocketUrl} from './util/url';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => any;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => any;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy = {\n  signature: TransactionSignature;\n} & BlockhashWithExpiryBlockHeight;\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n};\n\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A confirmed transaction on the ledger\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  useHttps: boolean,\n  httpHeaders?: HttpHeaders,\n  customFetch?: typeof crossFetch,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n): RpcClient {\n  const fetch = customFetch ? customFetch : crossFetch;\n  let agentManager: AgentManager | undefined;\n  if (!process.env.BROWSER) {\n    agentManager = new AgentManager(useHttps);\n  }\n\n  let fetchWithMiddleware:\n    | ((url: string, options: any) => Promise<Response>)\n    | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (url: string, options: any) => {\n      const modifiedFetchArgs = await new Promise<[string, any]>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(url, options, (modifiedUrl, modifiedOptions) =>\n              resolve([modifiedUrl, modifiedOptions]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n  }),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(\n      pick({\n        pubkey: PublicKeyFromString,\n        signer: boolean(),\n        writable: boolean(),\n      }),\n    ),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64) */\n  encoding?: 'base64' | 'jsonParsed';\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {[header: string]: string};\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  url: string,\n  options: any,\n  fetch: (modifiedUrl: string, modifiedOptions: any) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: typeof crossFetch;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let url = new URL(endpoint);\n    const useHttps = url.protocol === 'https:';\n\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = endpoint;\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      url.toString(),\n      useHttps,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get balance for ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block time for slot ' + slot + ': ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get minimum ledger slot: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get first available block: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error('failed to get token supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token account balance: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get largest accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token largest accounts: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info for accounts ' + keys + ': ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitment?: Commitment,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitment,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined,\n      epoch !== undefined ? {epoch} : undefined,\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new Error(\n        `failed to get Stake Activation ${publicKey.toBase58()}: ${\n          res.error.message\n        }`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const extra: Pick<GetProgramAccountsConfig, 'dataSlice' | 'filters'> = {};\n\n    let commitment;\n    let encoding;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n        encoding = configOrCommitment.encoding;\n\n        if (configOrCommitment.dataSlice) {\n          extra.dataSlice = configOrCommitment.dataSlice;\n        }\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const extra: Pick<GetParsedProgramAccountsConfig, 'filters'> = {};\n\n    let commitment;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: BlockheightBasedTransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` using a `TransactionConfirmationConfig` */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy:\n      | BlockheightBasedTransactionConfirmationStrategy\n      | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config =\n        strategy as BlockheightBasedTransactionConfirmationStrategy;\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const subscriptionCommitment = commitment || this.commitment;\n    let timeoutId;\n    let subscriptionId;\n    let done = false;\n\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          rawSignature,\n          (result: SignatureResult, context: Context) => {\n            subscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            done = true;\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    const checkBlockHeight = async () => {\n      try {\n        const blockHeight = await this.getBlockHeight(commitment);\n        return blockHeight;\n      } catch (_e) {\n        return -1;\n      }\n    };\n\n    const expiryPromise = new Promise<\n      | {__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED}\n      | {__type: TransactionStatus.TIMED_OUT; timeoutMs: number}\n    >(resolve => {\n      if (typeof strategy === 'string') {\n        let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n        switch (subscriptionCommitment) {\n          case 'processed':\n          case 'recent':\n          case 'single':\n          case 'confirmed':\n          case 'singleGossip': {\n            timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n            break;\n          }\n          // exhaust enums to ensure full coverage\n          case 'finalized':\n          case 'max':\n          case 'root':\n        }\n\n        timeoutId = setTimeout(\n          () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n          timeoutMs,\n        );\n      } else {\n        let config =\n          strategy as BlockheightBasedTransactionConfirmationStrategy;\n        (async () => {\n          let currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n          while (currentBlockHeight <= config.lastValidBlockHeight) {\n            await sleep(1000);\n            if (done) return;\n            currentBlockHeight = await checkBlockHeight();\n            if (done) return;\n          }\n          resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n        })();\n      }\n    });\n\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      switch (outcome.__type) {\n        case TransactionStatus.BLOCKHEIGHT_EXCEEDED:\n          throw new TransactionExpiredBlockheightExceededError(rawSignature);\n        case TransactionStatus.PROCESSED:\n          result = outcome.response;\n          break;\n        case TransactionStatus.TIMED_OUT:\n          throw new TransactionExpiredTimeoutError(\n            rawSignature,\n            outcome.timeoutMs / 1000,\n          );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new Error('failed to get cluster nodes: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new Error('failed to get vote accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitment?: Commitment): Promise<string> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get slot leader: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new Error('failed to get slot leaders: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get signature status: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get transaction count: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitment?: Commitment,\n  ): Promise<(InflationReward | null)[]> {\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined,\n      {\n        epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation reward: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitment?: Commitment): Promise<EpochInfo> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch info: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch schedule: ' + res.error.message);\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get leader schedule: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get recent blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const args = this._buildArgs(limit ? [limit] : []);\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get recent performance samples: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get fee calculator: ' + res.error.message);\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: Message,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const wireMessage = message.serialize().toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result as unknown as RpcResponseAndContext<number>;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitment?: Commitment,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get latest blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new Error('failed to get version: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get genesis hash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  async getBlock(\n    slot: number,\n    opts?: {commitment?: Finality},\n  ): Promise<BlockResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  async getBlockHeight(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block height information: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block production information: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  async getTransaction(\n    signature: string,\n    opts?: {commitment?: Finality},\n  ): Promise<TransactionResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: new Message(result.transaction.message),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error('failed to get transactions: ' + res.error.message);\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(TransactionResponse | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error('failed to get transactions: ' + res.error.message);\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new Error('failed to get blocks: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get transaction: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error(\n          'failed to get confirmed transactions: ' + res.error.message,\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'airdrop to ' + to.toBase58() + ' failed: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * Simulate a transaction\n   */\n  async simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration++;\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._subscriptionsByHash[hash] = {\n        ...subscription,\n        state: 'pending',\n      };\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'subscribing',\n                };\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                };\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'pending',\n                };\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._subscriptionsByHash[hash] = {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  };\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._subscriptionsByHash[hash] = {\n                      ...subscription,\n                      state: 'subscribed',\n                    };\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'unsubscribed',\n                };\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import nacl from 'tweetnacl';\n\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    if (keypair) {\n      this._keypair = keypair;\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(nacl.sign.keyPair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    const keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode('@solana/web3.js-validation-v1');\n      const signature = nacl.sign.detached(signData, keypair.secretKey);\n      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n        throw new Error('provided secretKey is invalid');\n      }\n    }\n    return new Keypair(keypair);\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    return new Keypair(nacl.sign.keyPair.fromSeed(seed));\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return this._keypair.secretKey;\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport nacl from 'tweetnacl';\n\nimport {Keypair} from './keypair';\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = nacl.sign.detached(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport secp256k1 from 'secp256k1';\nimport sha3 from 'js-sha3';\n\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\nimport {toBuffer} from './util/to-buffer';\n\nconst {publicKeyCreate, ecdsaSign} = secp256k1;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(\n        sha3.keccak_256.update(toBuffer(publicKey)).digest(),\n      ).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(\n        sha3.keccak_256.update(toBuffer(message)).digest(),\n      );\n      const {signature, recid: recoveryId} = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './util/shortvec-encoding';\nimport {PublicKey} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    const PUBKEY_LENGTH = 32;\n\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './util/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'InitializeAccount' | 'Withdraw';\n\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   */\n  static space: number = 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import defineProperty from \"./defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}",null,"import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deserializeUnchecked = exports.deserialize = exports.serialize = exports.BinaryReader = exports.BinaryWriter = exports.BorshError = exports.baseDecode = exports.baseEncode = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bs58_1 = __importDefault(require(\"bs58\"));\n// TODO: Make sure this polyfill not included when not required\nconst encoding = __importStar(require(\"text-encoding-utf-8\"));\nconst ResolvedTextDecoder = typeof TextDecoder !== \"function\" ? encoding.TextDecoder : TextDecoder;\nconst textDecoder = new ResolvedTextDecoder(\"utf-8\", { fatal: true });\nfunction baseEncode(value) {\n    if (typeof value === \"string\") {\n        value = Buffer.from(value, \"utf8\");\n    }\n    return bs58_1.default.encode(Buffer.from(value));\n}\nexports.baseEncode = baseEncode;\nfunction baseDecode(value) {\n    return Buffer.from(bs58_1.default.decode(value));\n}\nexports.baseDecode = baseDecode;\nconst INITIAL_LENGTH = 1024;\nclass BorshError extends Error {\n    constructor(message) {\n        super(message);\n        this.fieldPath = [];\n        this.originalMessage = message;\n    }\n    addToFieldPath(fieldName) {\n        this.fieldPath.splice(0, 0, fieldName);\n        // NOTE: Modifying message directly as jest doesn't use .toString()\n        this.message = this.originalMessage + \": \" + this.fieldPath.join(\".\");\n    }\n}\nexports.BorshError = BorshError;\n/// Binary encoder.\nclass BinaryWriter {\n    constructor() {\n        this.buf = Buffer.alloc(INITIAL_LENGTH);\n        this.length = 0;\n    }\n    maybeResize() {\n        if (this.buf.length < 16 + this.length) {\n            this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);\n        }\n    }\n    writeU8(value) {\n        this.maybeResize();\n        this.buf.writeUInt8(value, this.length);\n        this.length += 1;\n    }\n    writeU16(value) {\n        this.maybeResize();\n        this.buf.writeUInt16LE(value, this.length);\n        this.length += 2;\n    }\n    writeU32(value) {\n        this.maybeResize();\n        this.buf.writeUInt32LE(value, this.length);\n        this.length += 4;\n    }\n    writeU64(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 8)));\n    }\n    writeU128(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 16)));\n    }\n    writeU256(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 32)));\n    }\n    writeU512(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 64)));\n    }\n    writeBuffer(buffer) {\n        // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser\n        this.buf = Buffer.concat([\n            Buffer.from(this.buf.subarray(0, this.length)),\n            buffer,\n            Buffer.alloc(INITIAL_LENGTH),\n        ]);\n        this.length += buffer.length;\n    }\n    writeString(str) {\n        this.maybeResize();\n        const b = Buffer.from(str, \"utf8\");\n        this.writeU32(b.length);\n        this.writeBuffer(b);\n    }\n    writeFixedArray(array) {\n        this.writeBuffer(Buffer.from(array));\n    }\n    writeArray(array, fn) {\n        this.maybeResize();\n        this.writeU32(array.length);\n        for (const elem of array) {\n            this.maybeResize();\n            fn(elem);\n        }\n    }\n    toArray() {\n        return this.buf.subarray(0, this.length);\n    }\n}\nexports.BinaryWriter = BinaryWriter;\nfunction handlingRangeError(target, propertyKey, propertyDescriptor) {\n    const originalMethod = propertyDescriptor.value;\n    propertyDescriptor.value = function (...args) {\n        try {\n            return originalMethod.apply(this, args);\n        }\n        catch (e) {\n            if (e instanceof RangeError) {\n                const code = e.code;\n                if ([\"ERR_BUFFER_OUT_OF_BOUNDS\", \"ERR_OUT_OF_RANGE\"].indexOf(code) >= 0) {\n                    throw new BorshError(\"Reached the end of buffer when deserializing\");\n                }\n            }\n            throw e;\n        }\n    };\n}\nclass BinaryReader {\n    constructor(buf) {\n        this.buf = buf;\n        this.offset = 0;\n    }\n    readU8() {\n        const value = this.buf.readUInt8(this.offset);\n        this.offset += 1;\n        return value;\n    }\n    readU16() {\n        const value = this.buf.readUInt16LE(this.offset);\n        this.offset += 2;\n        return value;\n    }\n    readU32() {\n        const value = this.buf.readUInt32LE(this.offset);\n        this.offset += 4;\n        return value;\n    }\n    readU64() {\n        const buf = this.readBuffer(8);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU128() {\n        const buf = this.readBuffer(16);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU256() {\n        const buf = this.readBuffer(32);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU512() {\n        const buf = this.readBuffer(64);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readBuffer(len) {\n        if (this.offset + len > this.buf.length) {\n            throw new BorshError(`Expected buffer length ${len} isn't within bounds`);\n        }\n        const result = this.buf.slice(this.offset, this.offset + len);\n        this.offset += len;\n        return result;\n    }\n    readString() {\n        const len = this.readU32();\n        const buf = this.readBuffer(len);\n        try {\n            // NOTE: Using TextDecoder to fail on invalid UTF-8\n            return textDecoder.decode(buf);\n        }\n        catch (e) {\n            throw new BorshError(`Error decoding UTF-8 string: ${e}`);\n        }\n    }\n    readFixedArray(len) {\n        return new Uint8Array(this.readBuffer(len));\n    }\n    readArray(fn) {\n        const len = this.readU32();\n        const result = Array();\n        for (let i = 0; i < len; ++i) {\n            result.push(fn());\n        }\n        return result;\n    }\n}\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU8\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU16\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU32\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU64\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU128\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU256\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU512\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readString\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readFixedArray\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readArray\", null);\nexports.BinaryReader = BinaryReader;\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\nfunction serializeField(schema, fieldName, value, fieldType, writer) {\n    try {\n        // TODO: Handle missing values properly (make sure they never result in just skipped write)\n        if (typeof fieldType === \"string\") {\n            writer[`write${capitalizeFirstLetter(fieldType)}`](value);\n        }\n        else if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                if (value.length !== fieldType[0]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[0]}, but got ${value.length} bytes`);\n                }\n                writer.writeFixedArray(value);\n            }\n            else if (fieldType.length === 2 && typeof fieldType[1] === \"number\") {\n                if (value.length !== fieldType[1]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[1]}, but got ${value.length} bytes`);\n                }\n                for (let i = 0; i < fieldType[1]; i++) {\n                    serializeField(schema, null, value[i], fieldType[0], writer);\n                }\n            }\n            else {\n                writer.writeArray(value, (item) => {\n                    serializeField(schema, fieldName, item, fieldType[0], writer);\n                });\n            }\n        }\n        else if (fieldType.kind !== undefined) {\n            switch (fieldType.kind) {\n                case \"option\": {\n                    if (value === null || value === undefined) {\n                        writer.writeU8(0);\n                    }\n                    else {\n                        writer.writeU8(1);\n                        serializeField(schema, fieldName, value, fieldType.type, writer);\n                    }\n                    break;\n                }\n                case \"map\": {\n                    writer.writeU32(value.size);\n                    value.forEach((val, key) => {\n                        serializeField(schema, fieldName, key, fieldType.key, writer);\n                        serializeField(schema, fieldName, val, fieldType.value, writer);\n                    });\n                    break;\n                }\n                default:\n                    throw new BorshError(`FieldType ${fieldType} unrecognized`);\n            }\n        }\n        else {\n            serializeStruct(schema, value, writer);\n        }\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction serializeStruct(schema, obj, writer) {\n    if (typeof obj.borshSerialize === \"function\") {\n        obj.borshSerialize(writer);\n        return;\n    }\n    const structSchema = schema.get(obj.constructor);\n    if (!structSchema) {\n        throw new BorshError(`Class ${obj.constructor.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        structSchema.fields.map(([fieldName, fieldType]) => {\n            serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n        });\n    }\n    else if (structSchema.kind === \"enum\") {\n        const name = obj[structSchema.field];\n        for (let idx = 0; idx < structSchema.values.length; ++idx) {\n            const [fieldName, fieldType] = structSchema.values[idx];\n            if (fieldName === name) {\n                writer.writeU8(idx);\n                serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n                break;\n            }\n        }\n    }\n    else {\n        throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${obj.constructor.name}`);\n    }\n}\n/// Serialize given object using schema of the form:\n/// { class_name -> [ [field_name, field_type], .. ], .. }\nfunction serialize(schema, obj, Writer = BinaryWriter) {\n    const writer = new Writer();\n    serializeStruct(schema, obj, writer);\n    return writer.toArray();\n}\nexports.serialize = serialize;\nfunction deserializeField(schema, fieldName, fieldType, reader) {\n    try {\n        if (typeof fieldType === \"string\") {\n            return reader[`read${capitalizeFirstLetter(fieldType)}`]();\n        }\n        if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                return reader.readFixedArray(fieldType[0]);\n            }\n            else if (typeof fieldType[1] === \"number\") {\n                const arr = [];\n                for (let i = 0; i < fieldType[1]; i++) {\n                    arr.push(deserializeField(schema, null, fieldType[0], reader));\n                }\n                return arr;\n            }\n            else {\n                return reader.readArray(() => deserializeField(schema, fieldName, fieldType[0], reader));\n            }\n        }\n        if (fieldType.kind === \"option\") {\n            const option = reader.readU8();\n            if (option) {\n                return deserializeField(schema, fieldName, fieldType.type, reader);\n            }\n            return undefined;\n        }\n        if (fieldType.kind === \"map\") {\n            let map = new Map();\n            const length = reader.readU32();\n            for (let i = 0; i < length; i++) {\n                const key = deserializeField(schema, fieldName, fieldType.key, reader);\n                const val = deserializeField(schema, fieldName, fieldType.value, reader);\n                map.set(key, val);\n            }\n            return map;\n        }\n        return deserializeStruct(schema, fieldType, reader);\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction deserializeStruct(schema, classType, reader) {\n    if (typeof classType.borshDeserialize === \"function\") {\n        return classType.borshDeserialize(reader);\n    }\n    const structSchema = schema.get(classType);\n    if (!structSchema) {\n        throw new BorshError(`Class ${classType.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        const result = {};\n        for (const [fieldName, fieldType] of schema.get(classType).fields) {\n            result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);\n        }\n        return new classType(result);\n    }\n    if (structSchema.kind === \"enum\") {\n        const idx = reader.readU8();\n        if (idx >= structSchema.values.length) {\n            throw new BorshError(`Enum index: ${idx} is out of range`);\n        }\n        const [fieldName, fieldType] = structSchema.values[idx];\n        const fieldValue = deserializeField(schema, fieldName, fieldType, reader);\n        return new classType({ [fieldName]: fieldValue });\n    }\n    throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${classType.constructor.name}`);\n}\n/// Deserializes object from bytes using schema.\nfunction deserialize(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    const result = deserializeStruct(schema, classType, reader);\n    if (reader.offset < buffer.length) {\n        throw new BorshError(`Unexpected ${buffer.length - reader.offset} bytes after deserialized data`);\n    }\n    return result;\n}\nexports.deserialize = deserialize;\n/// Deserializes object from bytes using schema, without checking the length read\nfunction deserializeUnchecked(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    return deserializeStruct(schema, classType, reader);\n}\nexports.deserializeUnchecked = deserializeUnchecked;\n","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet converter;\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\nfunction toBigIntLE(buf) {\n    {\n        const reversed = Buffer.from(buf);\n        reversed.reverse();\n        const hex = reversed.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\nfunction toBigIntBE(buf) {\n    {\n        const hex = buf.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\nfunction toBufferLE(num, width) {\n    {\n        const hex = num.toString(16);\n        const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n        buffer.reverse();\n        return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\nfunction toBufferBE(num, width) {\n    {\n        const hex = num.toString(16);\n        return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n}\nexports.toBufferBE = toBufferBE;\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Client = void 0;\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _websocket = _interopRequireDefault(require(\"./lib/client/websocket.browser\"));\n\nvar _client = _interopRequireDefault(require(\"./lib/client\"));\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar Client = /*#__PURE__*/function (_CommonClient) {\n  (0, _inherits2[\"default\"])(Client, _CommonClient);\n\n  var _super = _createSuper(Client);\n\n  function Client() {\n    var address = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"ws://localhost:8080\";\n\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$autoconnect = _ref.autoconnect,\n        autoconnect = _ref$autoconnect === void 0 ? true : _ref$autoconnect,\n        _ref$reconnect = _ref.reconnect,\n        reconnect = _ref$reconnect === void 0 ? true : _ref$reconnect,\n        _ref$reconnect_interv = _ref.reconnect_interval,\n        reconnect_interval = _ref$reconnect_interv === void 0 ? 1000 : _ref$reconnect_interv,\n        _ref$max_reconnects = _ref.max_reconnects,\n        max_reconnects = _ref$max_reconnects === void 0 ? 5 : _ref$max_reconnects;\n\n    var generate_request_id = arguments.length > 2 ? arguments[2] : undefined;\n    (0, _classCallCheck2[\"default\"])(this, Client);\n    return _super.call(this, _websocket[\"default\"], address, {\n      autoconnect: autoconnect,\n      reconnect: reconnect,\n      reconnect_interval: reconnect_interval,\n      max_reconnects: max_reconnects\n    }, generate_request_id);\n  }\n\n  return (0, _createClass2[\"default\"])(Client);\n}(_client[\"default\"]);\n\nexports.Client = Client;","/**\n * WebSocket implements a browser-side WebSocket specification.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar WebSocketBrowserImpl = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(WebSocketBrowserImpl, _EventEmitter);\n\n  var _super = _createSuper(WebSocketBrowserImpl);\n\n  /** Instantiate a WebSocket class\n   * @constructor\n   * @param {String} address - url to a websocket server\n   * @param {(Object)} options - websocket options\n   * @param {(String|Array)} protocols - a list of protocols\n   * @return {WebSocketBrowserImpl} - returns a WebSocket instance\n   */\n  function WebSocketBrowserImpl(address, options, protocols) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, WebSocketBrowserImpl);\n    _this = _super.call(this);\n    _this.socket = new window.WebSocket(address, protocols);\n\n    _this.socket.onopen = function () {\n      return _this.emit(\"open\");\n    };\n\n    _this.socket.onmessage = function (event) {\n      return _this.emit(\"message\", event.data);\n    };\n\n    _this.socket.onerror = function (error) {\n      return _this.emit(\"error\", error);\n    };\n\n    _this.socket.onclose = function (event) {\n      _this.emit(\"close\", event.code, event.reason);\n    };\n\n    return _this;\n  }\n  /**\n   * Sends data through a websocket connection\n   * @method\n   * @param {(String|Object)} data - data to be sent via websocket\n   * @param {Object} optionsOrCallback - ws options\n   * @param {Function} callback - a callback called once the data is sent\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(WebSocketBrowserImpl, [{\n    key: \"send\",\n    value: function send(data, optionsOrCallback, callback) {\n      var cb = callback || optionsOrCallback;\n\n      try {\n        this.socket.send(data);\n        cb();\n      } catch (error) {\n        cb(error);\n      }\n    }\n    /**\n     * Closes an underlying socket\n     * @method\n     * @param {Number} code - status code explaining why the connection is being closed\n     * @param {String} reason - a description why the connection is closing\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, reason) {\n      this.socket.close(code, reason);\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(type, listener, options) {\n      this.socket.addEventListener(type, listener, options);\n    }\n  }]);\n  return WebSocketBrowserImpl;\n}(_eventemitter.EventEmitter);\n/**\n * factory method for common WebSocket instance\n * @method\n * @param {String} address - url to a websocket server\n * @param {(Object)} options - websocket options\n * @return {Undefined}\n */\n\n\nfunction _default(address, options) {\n  return new WebSocketBrowserImpl(address, options);\n}","/**\n * \"Client\" wraps \"ws\" or a browser-implemented \"WebSocket\" library\n * according to the environment providing JSON RPC 2.0 support on top.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar __rest = void 0 && (void 0).__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}; // @ts-ignore\n\n\nvar CommonClient = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(CommonClient, _EventEmitter);\n\n  var _super = _createSuper(CommonClient);\n\n  /**\n   * Instantiate a Client class.\n   * @constructor\n   * @param {webSocketFactory} webSocketFactory - factory method for WebSocket\n   * @param {String} address - url to a websocket server\n   * @param {Object} options - ws options object with reconnect parameters\n   * @param {Function} generate_request_id - custom generation request Id\n   * @return {CommonClient}\n   */\n  function CommonClient(webSocketFactory) {\n    var _this;\n\n    var address = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"ws://localhost:8080\";\n\n    var _a = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var generate_request_id = arguments.length > 3 ? arguments[3] : undefined;\n    (0, _classCallCheck2[\"default\"])(this, CommonClient);\n\n    var _a$autoconnect = _a.autoconnect,\n        autoconnect = _a$autoconnect === void 0 ? true : _a$autoconnect,\n        _a$reconnect = _a.reconnect,\n        reconnect = _a$reconnect === void 0 ? true : _a$reconnect,\n        _a$reconnect_interval = _a.reconnect_interval,\n        reconnect_interval = _a$reconnect_interval === void 0 ? 1000 : _a$reconnect_interval,\n        _a$max_reconnects = _a.max_reconnects,\n        max_reconnects = _a$max_reconnects === void 0 ? 5 : _a$max_reconnects,\n        rest_options = __rest(_a, [\"autoconnect\", \"reconnect\", \"reconnect_interval\", \"max_reconnects\"]);\n\n    _this = _super.call(this);\n    _this.webSocketFactory = webSocketFactory;\n    _this.queue = {};\n    _this.rpc_id = 0;\n    _this.address = address;\n    _this.autoconnect = autoconnect;\n    _this.ready = false;\n    _this.reconnect = reconnect;\n    _this.reconnect_interval = reconnect_interval;\n    _this.max_reconnects = max_reconnects;\n    _this.rest_options = rest_options;\n    _this.current_reconnects = 0;\n\n    _this.generate_request_id = generate_request_id || function () {\n      return ++_this.rpc_id;\n    };\n\n    if (_this.autoconnect) _this._connect(_this.address, Object.assign({\n      autoconnect: _this.autoconnect,\n      reconnect: _this.reconnect,\n      reconnect_interval: _this.reconnect_interval,\n      max_reconnects: _this.max_reconnects\n    }, _this.rest_options));\n    return _this;\n  }\n  /**\n   * Connects to a defined server if not connected already.\n   * @method\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(CommonClient, [{\n    key: \"connect\",\n    value: function connect() {\n      if (this.socket) return;\n\n      this._connect(this.address, Object.assign({\n        autoconnect: this.autoconnect,\n        reconnect: this.reconnect,\n        reconnect_interval: this.reconnect_interval,\n        max_reconnects: this.max_reconnects\n      }, this.rest_options));\n    }\n    /**\n     * Calls a registered RPC method on server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object|Array} params - optional method parameters\n     * @param {Number} timeout - RPC reply timeout value\n     * @param {Object} ws_opts - options passed to ws\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"call\",\n    value: function call(method, params, timeout, ws_opts) {\n      var _this2 = this;\n\n      if (!ws_opts && \"object\" === (0, _typeof2[\"default\"])(timeout)) {\n        ws_opts = timeout;\n        timeout = null;\n      }\n\n      return new Promise(function (resolve, reject) {\n        if (!_this2.ready) return reject(new Error(\"socket not ready\"));\n\n        var rpc_id = _this2.generate_request_id(method, params);\n\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null,\n          id: rpc_id\n        };\n\n        _this2.socket.send(JSON.stringify(message), ws_opts, function (error) {\n          if (error) return reject(error);\n          _this2.queue[rpc_id] = {\n            promise: [resolve, reject]\n          };\n\n          if (timeout) {\n            _this2.queue[rpc_id].timeout = setTimeout(function () {\n              delete _this2.queue[rpc_id];\n              reject(new Error(\"reply timeout\"));\n            }, timeout);\n          }\n        });\n      });\n    }\n    /**\n     * Logins with the other side of the connection.\n     * @method\n     * @param {Object} params - Login credentials object\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"login\",\n    value: function () {\n      var _login = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(params) {\n        var resp;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.call(\"rpc.login\", params);\n\n              case 2:\n                resp = _context.sent;\n\n                if (resp) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error(\"authentication failed\");\n\n              case 5:\n                return _context.abrupt(\"return\", resp);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function login(_x) {\n        return _login.apply(this, arguments);\n      }\n\n      return login;\n    }()\n    /**\n     * Fetches a list of client's methods registered on server.\n     * @method\n     * @return {Array}\n     */\n\n  }, {\n    key: \"listMethods\",\n    value: function () {\n      var _listMethods = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2() {\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.call(\"__listMethods\");\n\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function listMethods() {\n        return _listMethods.apply(this, arguments);\n      }\n\n      return listMethods;\n    }()\n    /**\n     * Sends a JSON-RPC 2.0 notification to server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object} params - optional method parameters\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"notify\",\n    value: function notify(method, params) {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (!_this3.ready) return reject(new Error(\"socket not ready\"));\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null\n        };\n\n        _this3.socket.send(JSON.stringify(message), function (error) {\n          if (error) return reject(error);\n          resolve();\n        });\n      });\n    }\n    /**\n     * Subscribes for a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function () {\n      var _subscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee3(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context3.next = 3;\n                return this.call(\"rpc.on\", event);\n\n              case 3:\n                result = _context3.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed subscribing to an event '\" + event + \"' with: \" + result[event]);\n\n              case 6:\n                return _context3.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function subscribe(_x2) {\n        return _subscribe.apply(this, arguments);\n      }\n\n      return subscribe;\n    }()\n    /**\n     * Unsubscribes from a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function () {\n      var _unsubscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee4(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context4.next = 3;\n                return this.call(\"rpc.off\", event);\n\n              case 3:\n                result = _context4.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed unsubscribing from an event with: \" + result);\n\n              case 6:\n                return _context4.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function unsubscribe(_x3) {\n        return _unsubscribe.apply(this, arguments);\n      }\n\n      return unsubscribe;\n    }()\n    /**\n     * Closes a WebSocket connection gracefully.\n     * @method\n     * @param {Number} code - socket close code\n     * @param {String} data - optional data to be sent before closing\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, data) {\n      this.socket.close(code || 1000, data);\n    }\n    /**\n     * Connection/Message handler.\n     * @method\n     * @private\n     * @param {String} address - WebSocket API address\n     * @param {Object} options - ws options object\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"_connect\",\n    value: function _connect(address, options) {\n      var _this4 = this;\n\n      this.socket = this.webSocketFactory(address, options);\n      this.socket.addEventListener(\"open\", function () {\n        _this4.ready = true;\n\n        _this4.emit(\"open\");\n\n        _this4.current_reconnects = 0;\n      });\n      this.socket.addEventListener(\"message\", function (_ref) {\n        var message = _ref.data;\n        if (message instanceof ArrayBuffer) message = Buffer.from(message).toString();\n\n        try {\n          message = JSON.parse(message);\n        } catch (error) {\n          return;\n        } // check if any listeners are attached and forward event\n\n\n        if (message.notification && _this4.listeners(message.notification).length) {\n          if (!Object.keys(message.params).length) return _this4.emit(message.notification);\n          var args = [message.notification];\n          if (message.params.constructor === Object) args.push(message.params);else // using for-loop instead of unshift/spread because performance is better\n            for (var i = 0; i < message.params.length; i++) {\n              args.push(message.params[i]);\n            } // run as microtask so that pending queue messages are resolved first\n          // eslint-disable-next-line prefer-spread\n\n          return Promise.resolve().then(function () {\n            _this4.emit.apply(_this4, args);\n          });\n        }\n\n        if (!_this4.queue[message.id]) {\n          // general JSON RPC 2.0 events\n          if (message.method && message.params) {\n            // run as microtask so that pending queue messages are resolved first\n            return Promise.resolve().then(function () {\n              _this4.emit(message.method, message.params);\n            });\n          }\n\n          return;\n        } // reject early since server's response is invalid\n\n\n        if (\"error\" in message === \"result\" in message) _this4.queue[message.id].promise[1](new Error(\"Server response malformed. Response must include either \\\"result\\\"\" + \" or \\\"error\\\", but not both.\"));\n        if (_this4.queue[message.id].timeout) clearTimeout(_this4.queue[message.id].timeout);\n        if (message.error) _this4.queue[message.id].promise[1](message.error);else _this4.queue[message.id].promise[0](message.result);\n        delete _this4.queue[message.id];\n      });\n      this.socket.addEventListener(\"error\", function (error) {\n        return _this4.emit(\"error\", error);\n      });\n      this.socket.addEventListener(\"close\", function (_ref2) {\n        var code = _ref2.code,\n            reason = _ref2.reason;\n        if (_this4.ready) // Delay close event until internal state is updated\n          setTimeout(function () {\n            return _this4.emit(\"close\", code, reason);\n          }, 0);\n        _this4.ready = false;\n        _this4.socket = undefined;\n        if (code === 1000) return;\n        _this4.current_reconnects++;\n        if (_this4.reconnect && (_this4.max_reconnects > _this4.current_reconnects || _this4.max_reconnects === 0)) setTimeout(function () {\n          return _this4._connect(address, options);\n        }, _this4.reconnect_interval);\n      });\n    }\n  }]);\n  return CommonClient;\n}(_eventemitter.EventEmitter);\n\nexports[\"default\"] = CommonClient;","'use strict';\n\nconst uuid = require('uuid').v4;\nconst generateRequest = require('../../generateRequest');\n\n/**\n * Constructor for a Jayson Browser Client that does not depend any node.js core libraries\n * @class ClientBrowser\n * @param {Function} callServer Method that calls the server, receives the stringified request and a regular node-style callback\n * @param {Object} [options]\n * @param {Function} [options.reviver] Reviver function for JSON\n * @param {Function} [options.replacer] Replacer function for JSON\n * @param {Number} [options.version=2] JSON-RPC version to use (1|2)\n * @param {Function} [options.generator] Function to use for generating request IDs\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n * @return {ClientBrowser}\n */\nconst ClientBrowser = function(callServer, options) {\n  if(!(this instanceof ClientBrowser)) {\n    return new ClientBrowser(callServer, options);\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  this.options = {\n    reviver: typeof options.reviver !== 'undefined' ? options.reviver : null,\n    replacer: typeof options.replacer !== 'undefined' ? options.replacer : null,\n    generator: typeof options.generator !== 'undefined' ? options.generator : function() { return uuid(); },\n    version: typeof options.version !== 'undefined' ? options.version : 2,\n    notificationIdNull: typeof options.notificationIdNull === 'boolean' ? options.notificationIdNull : false,\n  };\n\n  this.callServer = callServer;\n};\n\nmodule.exports = ClientBrowser;\n\n/**\n *  Creates a request and dispatches it if given a callback.\n *  @param {String|Array} method A batch request if passed an Array, or a method name if passed a String\n *  @param {Array|Object} [params] Parameters for the method\n *  @param {String|Number} [id] Optional id. If undefined an id will be generated. If null it creates a notification request\n *  @param {Function} [callback] Request callback. If specified, executes the request rather than only returning it.\n *  @throws {TypeError} Invalid parameters\n *  @return {Object} JSON-RPC 1.0 or 2.0 compatible request\n */\nClientBrowser.prototype.request = function(method, params, id, callback) {\n  const self = this;\n  let request = null;\n\n  // is this a batch request?\n  const isBatch = Array.isArray(method) && typeof params === 'function';\n\n  if (this.options.version === 1 && isBatch) {\n    throw new TypeError('JSON-RPC 1.0 does not support batching');\n  }\n\n  // is this a raw request?\n  const isRaw = !isBatch && method && typeof method === 'object' && typeof params === 'function';\n\n  if(isBatch || isRaw) {\n    callback = params;\n    request = method;\n  } else {\n    if(typeof id === 'function') {\n      callback = id;\n      // specifically undefined because \"null\" is a notification request\n      id = undefined;\n    }\n\n    const hasCallback = typeof callback === 'function';\n\n    try {\n      request = generateRequest(method, params, id, {\n        generator: this.options.generator,\n        version: this.options.version,\n        notificationIdNull: this.options.notificationIdNull,\n      });\n    } catch(err) {\n      if(hasCallback) {\n        return callback(err);\n      }\n      throw err;\n    }\n\n    // no callback means we should just return a raw request\n    if(!hasCallback) {\n      return request;\n    }\n\n  }\n\n  let message;\n  try {\n    message = JSON.stringify(request, this.options.replacer);\n  } catch(err) {\n    return callback(err);\n  }\n\n  this.callServer(message, function(err, response) {\n    self._parseResponse(err, response, callback);\n  });\n\n  // always return the raw request\n  return request;\n};\n\n/**\n * Parses a response from a server\n * @param {Object} err Error to pass on that is unrelated to the actual response\n * @param {String} responseText JSON-RPC 1.0 or 2.0 response\n * @param {Function} callback Callback that will receive different arguments depending on the amount of parameters\n * @private\n */\nClientBrowser.prototype._parseResponse = function(err, responseText, callback) {\n  if(err) {\n    callback(err);\n    return;\n  }\n\n  if(!responseText) {\n    // empty response text, assume that is correct because it could be a\n    // notification which jayson does not give any body for\n    return callback();\n  }\n\n  let response;\n  try {\n    response = JSON.parse(responseText, this.options.reviver);\n  } catch(err) {\n    return callback(err);\n  }\n\n  if(callback.length === 3) {\n    // if callback length is 3, we split callback arguments on error and response\n\n    // is batch response?\n    if(Array.isArray(response)) {\n\n      // neccesary to split strictly on validity according to spec here\n      const isError = function(res) {\n        return typeof res.error !== 'undefined';\n      };\n\n      const isNotError = function (res) {\n        return !isError(res);\n      };\n\n      return callback(null, response.filter(isError), response.filter(isNotError));\n    \n    } else {\n\n      // split regardless of validity\n      return callback(null, response.error, response.result);\n    \n    }\n  \n  }\n\n  callback(null, response);\n};\n","'use strict';\n\nconst uuid = require('uuid').v4;\n\n/**\n *  Generates a JSON-RPC 1.0 or 2.0 request\n *  @param {String} method Name of method to call\n *  @param {Array|Object} params Array of parameters passed to the method as specified, or an object of parameter names and corresponding value\n *  @param {String|Number|null} [id] Request ID can be a string, number, null for explicit notification or left out for automatic generation\n *  @param {Object} [options]\n *  @param {Number} [options.version=2] JSON-RPC version to use (1 or 2)\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n *  @param {Function} [options.generator] Passed the request, and the options object and is expected to return a request ID\n *  @throws {TypeError} If any of the parameters are invalid\n *  @return {Object} A JSON-RPC 1.0 or 2.0 request\n *  @memberOf Utils\n */\nconst generateRequest = function(method, params, id, options) {\n  if(typeof method !== 'string') {\n    throw new TypeError(method + ' must be a string');\n  }\n\n  options = options || {};\n\n  // check valid version provided\n  const version = typeof options.version === 'number' ? options.version : 2;\n  if (version !== 1 && version !== 2) {\n    throw new TypeError(version + ' must be 1 or 2');\n  }\n\n  const request = {\n    method: method\n  };\n\n  if(version === 2) {\n    request.jsonrpc = '2.0';\n  }\n\n  if(params) {\n    // params given, but invalid?\n    if(typeof params !== 'object' && !Array.isArray(params)) {\n      throw new TypeError(params + ' must be an object, array or omitted');\n    }\n    request.params = params;\n  }\n\n  // if id was left out, generate one (null means explicit notification)\n  if(typeof(id) === 'undefined') {\n    const generator = typeof options.generator === 'function' ? options.generator : function() { return uuid(); };\n    request.id = generator(request, options);\n  } else if (version === 2 && id === null) {\n    // we have a version 2 notification\n    if (options.notificationIdNull) {\n      request.id = null; // id will not be set at all unless option provided\n    }\n  } else {\n    request.id = id;\n  }\n\n  return request;\n};\n\nmodule.exports = generateRequest;\n","module.exports = require('./lib')(require('./lib/elliptic'))\n","const errors = {\n  IMPOSSIBLE_CASE: 'Impossible case. Please create issue.',\n  TWEAK_ADD:\n    'The tweak was out of range or the resulted private key is invalid',\n  TWEAK_MUL: 'The tweak was out of range or equal to zero',\n  CONTEXT_RANDOMIZE_UNKNOW: 'Unknow error on context randomization',\n  SECKEY_INVALID: 'Private Key is invalid',\n  PUBKEY_PARSE: 'Public Key could not be parsed',\n  PUBKEY_SERIALIZE: 'Public Key serialization error',\n  PUBKEY_COMBINE: 'The sum of the public keys is not valid',\n  SIG_PARSE: 'Signature could not be parsed',\n  SIGN: 'The nonce generation function failed, or the private key was invalid',\n  RECOVER: 'Public key could not be recover',\n  ECDH: 'Scalar was invalid (zero or overflow)'\n}\n\nfunction assert (cond, msg) {\n  if (!cond) throw new Error(msg)\n}\n\nfunction isUint8Array (name, value, length) {\n  assert(value instanceof Uint8Array, `Expected ${name} to be an Uint8Array`)\n\n  if (length !== undefined) {\n    if (Array.isArray(length)) {\n      const numbers = length.join(', ')\n      const msg = `Expected ${name} to be an Uint8Array with length [${numbers}]`\n      assert(length.includes(value.length), msg)\n    } else {\n      const msg = `Expected ${name} to be an Uint8Array with length ${length}`\n      assert(value.length === length, msg)\n    }\n  }\n}\n\nfunction isCompressed (value) {\n  assert(toTypeString(value) === 'Boolean', 'Expected compressed to be a Boolean')\n}\n\nfunction getAssertedOutput (output = (len) => new Uint8Array(len), length) {\n  if (typeof output === 'function') output = output(length)\n  isUint8Array('output', output, length)\n  return output\n}\n\nfunction toTypeString (value) {\n  return Object.prototype.toString.call(value).slice(8, -1)\n}\n\nmodule.exports = (secp256k1) => {\n  return {\n    contextRandomize (seed) {\n      assert(\n        seed === null || seed instanceof Uint8Array,\n        'Expected seed to be an Uint8Array or null'\n      )\n      if (seed !== null) isUint8Array('seed', seed, 32)\n\n      switch (secp256k1.contextRandomize(seed)) {\n        case 1:\n          throw new Error(errors.CONTEXT_RANDOMIZE_UNKNOW)\n      }\n    },\n\n    privateKeyVerify (seckey) {\n      isUint8Array('private key', seckey, 32)\n\n      return secp256k1.privateKeyVerify(seckey) === 0\n    },\n\n    privateKeyNegate (seckey) {\n      isUint8Array('private key', seckey, 32)\n\n      switch (secp256k1.privateKeyNegate(seckey)) {\n        case 0:\n          return seckey\n        case 1:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    privateKeyTweakAdd (seckey, tweak) {\n      isUint8Array('private key', seckey, 32)\n      isUint8Array('tweak', tweak, 32)\n\n      switch (secp256k1.privateKeyTweakAdd(seckey, tweak)) {\n        case 0:\n          return seckey\n        case 1:\n          throw new Error(errors.TWEAK_ADD)\n      }\n    },\n\n    privateKeyTweakMul (seckey, tweak) {\n      isUint8Array('private key', seckey, 32)\n      isUint8Array('tweak', tweak, 32)\n\n      switch (secp256k1.privateKeyTweakMul(seckey, tweak)) {\n        case 0:\n          return seckey\n        case 1:\n          throw new Error(errors.TWEAK_MUL)\n      }\n    },\n\n    publicKeyVerify (pubkey) {\n      isUint8Array('public key', pubkey, [33, 65])\n\n      return secp256k1.publicKeyVerify(pubkey) === 0\n    },\n\n    publicKeyCreate (seckey, compressed = true, output) {\n      isUint8Array('private key', seckey, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyCreate(output, seckey)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.SECKEY_INVALID)\n        case 2:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyConvert (pubkey, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyConvert(output, pubkey)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyNegate (pubkey, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyNegate(output, pubkey)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n        case 3:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyCombine (pubkeys, compressed = true, output) {\n      assert(Array.isArray(pubkeys), 'Expected public keys to be an Array')\n      assert(pubkeys.length > 0, 'Expected public keys array will have more than zero items')\n      for (const pubkey of pubkeys) {\n        isUint8Array('public key', pubkey, [33, 65])\n      }\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyCombine(output, pubkeys)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.PUBKEY_COMBINE)\n        case 3:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyTweakAdd (pubkey, tweak, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isUint8Array('tweak', tweak, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyTweakAdd(output, pubkey, tweak)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.TWEAK_ADD)\n      }\n    },\n\n    publicKeyTweakMul (pubkey, tweak, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isUint8Array('tweak', tweak, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyTweakMul(output, pubkey, tweak)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.TWEAK_MUL)\n      }\n    },\n\n    signatureNormalize (sig) {\n      isUint8Array('signature', sig, 64)\n\n      switch (secp256k1.signatureNormalize(sig)) {\n        case 0:\n          return sig\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n      }\n    },\n\n    signatureExport (sig, output) {\n      isUint8Array('signature', sig, 64)\n      output = getAssertedOutput(output, 72)\n\n      const obj = { output, outputlen: 72 }\n      switch (secp256k1.signatureExport(obj, sig)) {\n        case 0:\n          return output.slice(0, obj.outputlen)\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    signatureImport (sig, output) {\n      isUint8Array('signature', sig)\n      output = getAssertedOutput(output, 64)\n\n      switch (secp256k1.signatureImport(output, sig)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    ecdsaSign (msg32, seckey, options = {}, output) {\n      isUint8Array('message', msg32, 32)\n      isUint8Array('private key', seckey, 32)\n      assert(toTypeString(options) === 'Object', 'Expected options to be an Object')\n      if (options.data !== undefined) isUint8Array('options.data', options.data)\n      if (options.noncefn !== undefined) assert(toTypeString(options.noncefn) === 'Function', 'Expected options.noncefn to be a Function')\n      output = getAssertedOutput(output, 64)\n\n      const obj = { signature: output, recid: null }\n      switch (secp256k1.ecdsaSign(obj, msg32, seckey, options.data, options.noncefn)) {\n        case 0:\n          return obj\n        case 1:\n          throw new Error(errors.SIGN)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    ecdsaVerify (sig, msg32, pubkey) {\n      isUint8Array('signature', sig, 64)\n      isUint8Array('message', msg32, 32)\n      isUint8Array('public key', pubkey, [33, 65])\n\n      switch (secp256k1.ecdsaVerify(sig, msg32, pubkey)) {\n        case 0:\n          return true\n        case 3:\n          return false\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.PUBKEY_PARSE)\n      }\n    },\n\n    ecdsaRecover (sig, recid, msg32, compressed = true, output) {\n      isUint8Array('signature', sig, 64)\n      assert(\n        toTypeString(recid) === 'Number' &&\n          recid >= 0 &&\n          recid <= 3,\n        'Expected recovery id to be a Number within interval [0, 3]'\n      )\n      isUint8Array('message', msg32, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.ecdsaRecover(output, sig, recid, msg32)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.RECOVER)\n        case 3:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    ecdh (pubkey, seckey, options = {}, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isUint8Array('private key', seckey, 32)\n      assert(toTypeString(options) === 'Object', 'Expected options to be an Object')\n      if (options.data !== undefined) isUint8Array('options.data', options.data)\n      if (options.hashfn !== undefined) {\n        assert(toTypeString(options.hashfn) === 'Function', 'Expected options.hashfn to be a Function')\n        if (options.xbuf !== undefined) isUint8Array('options.xbuf', options.xbuf, 32)\n        if (options.ybuf !== undefined) isUint8Array('options.ybuf', options.ybuf, 32)\n        isUint8Array('output', output)\n      } else {\n        output = getAssertedOutput(output, 32)\n      }\n\n      switch (secp256k1.ecdh(output, pubkey, seckey, options.data, options.hashfn, options.xbuf, options.ybuf)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.ECDH)\n      }\n    }\n  }\n}\n","const EC = require('elliptic').ec\n\nconst ec = new EC('secp256k1')\nconst ecparams = ec.curve\n\n// Hack, we can not use bn.js@5, while elliptic uses bn.js@4\n// See https://github.com/indutny/elliptic/issues/191#issuecomment-569888758\nconst BN = ecparams.n.constructor\n\nfunction loadCompressedPublicKey (first, xbuf) {\n  let x = new BN(xbuf)\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0) return null\n  x = x.toRed(ecparams.red)\n\n  // compute corresponding Y\n  let y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt()\n  if ((first === 0x03) !== y.isOdd()) y = y.redNeg()\n\n  return ec.keyPair({ pub: { x: x, y: y } })\n}\n\nfunction loadUncompressedPublicKey (first, xbuf, ybuf) {\n  let x = new BN(xbuf)\n  let y = new BN(ybuf)\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null\n\n  x = x.toRed(ecparams.red)\n  y = y.toRed(ecparams.red)\n\n  // is odd flag\n  if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null\n\n  // x*x*x + b = y*y\n  const x3 = x.redSqr().redIMul(x)\n  if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null\n\n  return ec.keyPair({ pub: { x: x, y: y } })\n}\n\nfunction loadPublicKey (pubkey) {\n  // length should be validated in interface\n  const first = pubkey[0]\n  switch (first) {\n    case 0x02:\n    case 0x03:\n      if (pubkey.length !== 33) return null\n      return loadCompressedPublicKey(first, pubkey.subarray(1, 33))\n    case 0x04:\n    case 0x06:\n    case 0x07:\n      if (pubkey.length !== 65) return null\n      return loadUncompressedPublicKey(first, pubkey.subarray(1, 33), pubkey.subarray(33, 65))\n    default:\n      return null\n  }\n}\n\nfunction savePublicKey (output, point) {\n  const pubkey = point.encode(null, output.length === 33)\n  // Loop should be faster because we do not need create extra Uint8Array\n  // output.set(new Uint8Array(pubkey))\n  for (let i = 0; i < output.length; ++i) output[i] = pubkey[i]\n}\n\nmodule.exports = {\n  contextRandomize () {\n    return 0\n  },\n\n  privateKeyVerify (seckey) {\n    const bn = new BN(seckey)\n    return bn.cmp(ecparams.n) < 0 && !bn.isZero() ? 0 : 1\n  },\n\n  privateKeyNegate (seckey) {\n    const bn = new BN(seckey)\n    const negate = ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Uint8Array, 'be', 32)\n    seckey.set(negate)\n    return 0\n  },\n\n  privateKeyTweakAdd (seckey, tweak) {\n    const bn = new BN(tweak)\n    if (bn.cmp(ecparams.n) >= 0) return 1\n\n    bn.iadd(new BN(seckey))\n    if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n)\n    if (bn.isZero()) return 1\n\n    const tweaked = bn.toArrayLike(Uint8Array, 'be', 32)\n    seckey.set(tweaked)\n\n    return 0\n  },\n\n  privateKeyTweakMul (seckey, tweak) {\n    let bn = new BN(tweak)\n    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1\n\n    bn.imul(new BN(seckey))\n    if (bn.cmp(ecparams.n) >= 0) bn = bn.umod(ecparams.n)\n\n    const tweaked = bn.toArrayLike(Uint8Array, 'be', 32)\n    seckey.set(tweaked)\n\n    return 0\n  },\n\n  publicKeyVerify (pubkey) {\n    const pair = loadPublicKey(pubkey)\n    return pair === null ? 1 : 0\n  },\n\n  publicKeyCreate (output, seckey) {\n    const bn = new BN(seckey)\n    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1\n\n    const point = ec.keyFromPrivate(seckey).getPublic()\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyConvert (output, pubkey) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    const point = pair.getPublic()\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyNegate (output, pubkey) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    const point = pair.getPublic()\n    point.y = point.y.redNeg()\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyCombine (output, pubkeys) {\n    const pairs = new Array(pubkeys.length)\n    for (let i = 0; i < pubkeys.length; ++i) {\n      pairs[i] = loadPublicKey(pubkeys[i])\n      if (pairs[i] === null) return 1\n    }\n\n    let point = pairs[0].getPublic()\n    for (let i = 1; i < pairs.length; ++i) point = point.add(pairs[i].pub)\n    if (point.isInfinity()) return 2\n\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyTweakAdd (output, pubkey, tweak) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    tweak = new BN(tweak)\n    if (tweak.cmp(ecparams.n) >= 0) return 2\n\n    const point = pair.getPublic().add(ecparams.g.mul(tweak))\n    if (point.isInfinity()) return 2\n\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyTweakMul (output, pubkey, tweak) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    tweak = new BN(tweak)\n    if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) return 2\n\n    const point = pair.getPublic().mul(tweak)\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  signatureNormalize (sig) {\n    const r = new BN(sig.subarray(0, 32))\n    const s = new BN(sig.subarray(32, 64))\n    if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) return 1\n\n    if (s.cmp(ec.nh) === 1) {\n      sig.set(ecparams.n.sub(s).toArrayLike(Uint8Array, 'be', 32), 32)\n    }\n\n    return 0\n  },\n\n  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js\n  // Adapted for Uint8Array instead Buffer\n  signatureExport (obj, sig) {\n    const sigR = sig.subarray(0, 32)\n    const sigS = sig.subarray(32, 64)\n    if (new BN(sigR).cmp(ecparams.n) >= 0) return 1\n    if (new BN(sigS).cmp(ecparams.n) >= 0) return 1\n\n    const { output } = obj\n\n    // Prepare R\n    let r = output.subarray(4, 4 + 33)\n    r[0] = 0x00\n    r.set(sigR, 1)\n\n    let lenR = 33\n    let posR = 0\n    for (; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR);\n\n    r = r.subarray(posR)\n    if (r[0] & 0x80) return 1\n    if (lenR > 1 && (r[0] === 0x00) && !(r[1] & 0x80)) return 1\n\n    // Prepare S\n    let s = output.subarray(6 + 33, 6 + 33 + 33)\n    s[0] = 0x00\n    s.set(sigS, 1)\n\n    let lenS = 33\n    let posS = 0\n    for (; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS);\n\n    s = s.subarray(posS)\n    if (s[0] & 0x80) return 1\n    if (lenS > 1 && (s[0] === 0x00) && !(s[1] & 0x80)) return 1\n\n    // Set output length for return\n    obj.outputlen = 6 + lenR + lenS\n\n    // Output in specified format\n    // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]\n    output[0] = 0x30\n    output[1] = obj.outputlen - 2\n    output[2] = 0x02\n    output[3] = r.length\n    output.set(r, 4)\n    output[4 + lenR] = 0x02\n    output[5 + lenR] = s.length\n    output.set(s, 6 + lenR)\n\n    return 0\n  },\n\n  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js\n  // Adapted for Uint8Array instead Buffer\n  signatureImport (output, sig) {\n    if (sig.length < 8) return 1\n    if (sig.length > 72) return 1\n    if (sig[0] !== 0x30) return 1\n    if (sig[1] !== sig.length - 2) return 1\n    if (sig[2] !== 0x02) return 1\n\n    const lenR = sig[3]\n    if (lenR === 0) return 1\n    if (5 + lenR >= sig.length) return 1\n    if (sig[4 + lenR] !== 0x02) return 1\n\n    const lenS = sig[5 + lenR]\n    if (lenS === 0) return 1\n    if ((6 + lenR + lenS) !== sig.length) return 1\n\n    if (sig[4] & 0x80) return 1\n    if (lenR > 1 && (sig[4] === 0x00) && !(sig[5] & 0x80)) return 1\n\n    if (sig[lenR + 6] & 0x80) return 1\n    if (lenS > 1 && (sig[lenR + 6] === 0x00) && !(sig[lenR + 7] & 0x80)) return 1\n\n    let sigR = sig.subarray(4, 4 + lenR)\n    if (sigR.length === 33 && sigR[0] === 0x00) sigR = sigR.subarray(1)\n    if (sigR.length > 32) return 1\n\n    let sigS = sig.subarray(6 + lenR)\n    if (sigS.length === 33 && sigS[0] === 0x00) sigS = sigS.slice(1)\n    if (sigS.length > 32) throw new Error('S length is too long')\n\n    let r = new BN(sigR)\n    if (r.cmp(ecparams.n) >= 0) r = new BN(0)\n\n    let s = new BN(sig.subarray(6 + lenR))\n    if (s.cmp(ecparams.n) >= 0) s = new BN(0)\n\n    output.set(r.toArrayLike(Uint8Array, 'be', 32), 0)\n    output.set(s.toArrayLike(Uint8Array, 'be', 32), 32)\n\n    return 0\n  },\n\n  ecdsaSign (obj, message, seckey, data, noncefn) {\n    if (noncefn) {\n      const _noncefn = noncefn\n      noncefn = (counter) => {\n        const nonce = _noncefn(message, seckey, null, data, counter)\n\n        const isValid = nonce instanceof Uint8Array && nonce.length === 32\n        if (!isValid) throw new Error('This is the way')\n\n        return new BN(nonce)\n      }\n    }\n\n    const d = new BN(seckey)\n    if (d.cmp(ecparams.n) >= 0 || d.isZero()) return 1\n\n    let sig\n    try {\n      sig = ec.sign(message, seckey, { canonical: true, k: noncefn, pers: data })\n    } catch (err) {\n      return 1\n    }\n\n    obj.signature.set(sig.r.toArrayLike(Uint8Array, 'be', 32), 0)\n    obj.signature.set(sig.s.toArrayLike(Uint8Array, 'be', 32), 32)\n    obj.recid = sig.recoveryParam\n\n    return 0\n  },\n\n  ecdsaVerify (sig, msg32, pubkey) {\n    const sigObj = { r: sig.subarray(0, 32), s: sig.subarray(32, 64) }\n\n    const sigr = new BN(sigObj.r)\n    const sigs = new BN(sigObj.s)\n    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1\n    if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return 3\n\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 2\n\n    const point = pair.getPublic()\n    const isValid = ec.verify(msg32, sigObj, point)\n    return isValid ? 0 : 3\n  },\n\n  ecdsaRecover (output, sig, recid, msg32) {\n    const sigObj = { r: sig.slice(0, 32), s: sig.slice(32, 64) }\n\n    const sigr = new BN(sigObj.r)\n    const sigs = new BN(sigObj.s)\n    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1\n\n    if (sigr.isZero() || sigs.isZero()) return 2\n\n    // Can throw `throw new Error('Unable to find sencond key candinate');`\n    let point\n    try {\n      point = ec.recoverPubKey(msg32, sigObj, recid)\n    } catch (err) {\n      return 2\n    }\n\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  ecdh (output, pubkey, seckey, data, hashfn, xbuf, ybuf) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    const scalar = new BN(seckey)\n    if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) return 2\n\n    const point = pair.getPublic().mul(scalar)\n\n    if (hashfn === undefined) {\n      const data = point.encode(null, true)\n      const sha256 = ec.hash().update(data).digest()\n      for (let i = 0; i < 32; ++i) output[i] = sha256[i]\n    } else {\n      if (!xbuf) xbuf = new Uint8Array(32)\n      const x = point.getX().toArray('be', 32)\n      for (let i = 0; i < 32; ++i) xbuf[i] = x[i]\n\n      if (!ybuf) ybuf = new Uint8Array(32)\n      const y = point.getY().toArray('be', 32)\n      for (let i = 0; i < 32; ++i) ybuf[i] = y[i]\n\n      const hash = hashfn(xbuf, ybuf, data)\n\n      const isValid = hash instanceof Uint8Array && hash.length === output.length\n      if (!isValid) return 2\n\n      output.set(hash)\n    }\n\n    return 0\n  }\n}\n","import { Struct, Infer, Result, Context, Describe } from './struct'\nimport { Failure } from './error'\n\n/**\n * Check if a value is an iterator.\n */\n\nfunction isIterable<T>(x: unknown): x is Iterable<T> {\n  return isObject(x) && typeof x[Symbol.iterator] === 'function'\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isObject(x: unknown): x is object {\n  return typeof x === 'object' && x != null\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isPlainObject(x: unknown): x is { [key: string]: any } {\n  if (Object.prototype.toString.call(x) !== '[object Object]') {\n    return false\n  }\n\n  const prototype = Object.getPrototypeOf(x)\n  return prototype === null || prototype === Object.prototype\n}\n\n/**\n * Return a value as a printable string.\n */\n\nexport function print(value: any): string {\n  return typeof value === 'string' ? JSON.stringify(value) : `${value}`\n}\n\n/**\n * Shifts (removes and returns) the first value from the `input` iterator.\n * Like `Array.prototype.shift()` but for an `Iterator`.\n */\n\nexport function shiftIterator<T>(input: Iterator<T>): T | undefined {\n  const { done, value } = input.next()\n  return done ? undefined : value\n}\n\n/**\n * Convert a single validation result to a failure.\n */\n\nexport function toFailure<T, S>(\n  result: string | boolean | Partial<Failure>,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): Failure | undefined {\n  if (result === true) {\n    return\n  } else if (result === false) {\n    result = {}\n  } else if (typeof result === 'string') {\n    result = { message: result }\n  }\n\n  const { path, branch } = context\n  const { type } = struct\n  const {\n    refinement,\n    message = `Expected a value of type \\`${type}\\`${\n      refinement ? ` with refinement \\`${refinement}\\`` : ''\n    }, but received: \\`${print(value)}\\``,\n  } = result\n\n  return {\n    value,\n    type,\n    refinement,\n    key: path[path.length - 1],\n    path,\n    branch,\n    ...result,\n    message,\n  }\n}\n\n/**\n * Convert a validation result to an iterable of failures.\n */\n\nexport function* toFailures<T, S>(\n  result: Result,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): IterableIterator<Failure> {\n  if (!isIterable(result)) {\n    result = [result]\n  }\n\n  for (const r of result) {\n    const failure = toFailure(r, context, struct, value)\n\n    if (failure) {\n      yield failure\n    }\n  }\n}\n\n/**\n * Check a value against a struct, traversing deeply into nested values, and\n * returning an iterator of failures or success.\n */\n\nexport function* run<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    path?: any[]\n    branch?: any[]\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): IterableIterator<[Failure, undefined] | [undefined, T]> {\n  const { path = [], branch = [value], coerce = false, mask = false } = options\n  const ctx: Context = { path, branch }\n\n  if (coerce) {\n    value = struct.coercer(value, ctx)\n\n    if (\n      mask &&\n      struct.type !== 'type' &&\n      isObject(struct.schema) &&\n      isObject(value) &&\n      !Array.isArray(value)\n    ) {\n      for (const key in value) {\n        if (struct.schema[key] === undefined) {\n          delete value[key]\n        }\n      }\n    }\n  }\n\n  let valid = true\n\n  for (const failure of struct.validator(value, ctx)) {\n    valid = false\n    yield [failure, undefined]\n  }\n\n  for (let [k, v, s] of struct.entries(value, ctx)) {\n    const ts = run(v, s as Struct, {\n      path: k === undefined ? path : [...path, k],\n      branch: k === undefined ? branch : [...branch, v],\n      coerce,\n      mask,\n    })\n\n    for (const t of ts) {\n      if (t[0]) {\n        valid = false\n        yield [t[0], undefined]\n      } else if (coerce) {\n        v = t[1]\n\n        if (k === undefined) {\n          value = v\n        } else if (value instanceof Map) {\n          value.set(k, v)\n        } else if (value instanceof Set) {\n          value.add(v)\n        } else if (isObject(value)) {\n          value[k] = v\n        }\n      }\n    }\n  }\n\n  if (valid) {\n    for (const failure of struct.refiner(value as T, ctx)) {\n      valid = false\n      yield [failure, undefined]\n    }\n  }\n\n  if (valid) {\n    yield [undefined, value as T]\n  }\n}\n\n/**\n * Assign properties from one type to another, overwriting existing.\n */\n\nexport type Assign<T, U> = Simplify<U & Omit<T, keyof U>>\n\n/**\n * A schema for enum structs.\n */\n\nexport type EnumSchema<T extends string | number> = { [K in T]: K }\n\n/**\n * Check if a type is an exact match.\n */\n\nexport type IsMatch<T, G> = T extends G ? (G extends T ? T : never) : never\n\n/**\n * Check if a type is a record type.\n */\n\nexport type IsRecord<T> = T extends object\n  ? string extends keyof T\n    ? T\n    : never\n  : never\n/**\n * Check if a type is a tuple.\n */\n\nexport type IsTuple<T> = T extends [any]\n  ? T\n  : T extends [any, any]\n  ? T\n  : T extends [any, any, any]\n  ? T\n  : T extends [any, any, any, any]\n  ? T\n  : T extends [any, any, any, any, any]\n  ? T\n  : never\n\n/**\n * Check if a type is a union.\n */\n\nexport type IsUnion<T, U extends T = T> = (\n  T extends any ? (U extends T ? false : true) : false\n) extends false\n  ? never\n  : T\n\n/**\n * A schema for object structs.\n */\n\nexport type ObjectSchema = Record<string, Struct<any, any>>\n\n/**\n * Infer a type from an object struct schema.\n */\n\nexport type ObjectType<S extends ObjectSchema> = Simplify<\n  Optionalize<{ [K in keyof S]: Infer<S[K]> }>\n>\n\n/**\n * Omit properties from a type that extend from a specific type.\n */\n\nexport type OmitBy<T, V> = Omit<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Normalize properties of a type that allow `undefined` to make them optional.\n */\n\nexport type Optionalize<S extends object> = OmitBy<S, undefined> &\n  Partial<PickBy<S, undefined>>\n\n/**\n * Transform an object schema type to represent a partial.\n */\n\nexport type PartialObjectSchema<S extends ObjectSchema> = {\n  [K in keyof S]: Struct<Infer<S[K]> | undefined>\n}\n\n/**\n * Pick properties from a type that extend from a specific type.\n */\n\nexport type PickBy<T, V> = Pick<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Simplifies a type definition to its most basic representation.\n */\n\nexport type Simplify<T> = T extends any[] | Date\n  ? T\n  : { [K in keyof T]: T[K] } & {}\n\nexport type If<B extends Boolean, Then, Else> = B extends true ? Then : Else\n\n/**\n * A schema for any type of struct.\n */\n\nexport type StructSchema<T> = [T] extends [string]\n  ? [T] extends [IsMatch<T, string>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [number]\n  ? [T] extends [IsMatch<T, number>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [boolean]\n  ? [T] extends [IsMatch<T, boolean>]\n    ? null\n    : T\n  : T extends\n      | bigint\n      | symbol\n      | undefined\n      | null\n      | Function\n      | Date\n      | Error\n      | RegExp\n      | Map<any, any>\n      | WeakMap<any, any>\n      | Set<any>\n      | WeakSet<any>\n      | Promise<any>\n  ? null\n  : T extends Array<infer E>\n  ? T extends IsTuple<T>\n    ? null\n    : Struct<E>\n  : T extends object\n  ? T extends IsRecord<T>\n    ? null\n    : { [K in keyof T]: Describe<T[K]> }\n  : null\n\n/**\n * A schema for tuple structs.\n */\n\nexport type TupleSchema<T> = { [K in keyof T]: Struct<T[K]> }\n","/**\n * A `StructFailure` represents a single specific failure in validation.\n */\n\nexport type Failure = {\n  value: any\n  key: any\n  type: string\n  refinement: string | undefined\n  message: string\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * `StructError` objects are thrown (or returned) when validation fails.\n *\n * Validation logic is design to exit early for maximum performance. The error\n * represents the first error encountered during validation. For more detail,\n * the `error.failures` property is a generator function that can be run to\n * continue validation and receive all the failures in the data.\n */\n\nexport class StructError extends TypeError {\n  value: any\n  key!: any\n  type!: string\n  refinement!: string | undefined\n  path!: Array<any>\n  branch!: Array<any>\n  failures: () => Array<Failure>;\n  [x: string]: any\n\n  constructor(failure: Failure, failures: () => Generator<Failure>) {\n    let cached: Array<Failure> | undefined\n    const { message, ...rest } = failure\n    const { path } = failure\n    const msg =\n      path.length === 0 ? message : `At path: ${path.join('.')} -- ${message}`\n    super(msg)\n    Object.assign(this, rest)\n    this.name = this.constructor.name\n    this.failures = () => {\n      return (cached ??= [failure, ...failures()])\n    }\n  }\n}\n","import { toFailures, shiftIterator, StructSchema, run } from './utils'\nimport { StructError, Failure } from './error'\n\n/**\n * `Struct` objects encapsulate the validation logic for a specific type of\n * values. Once constructed, you use the `assert`, `is` or `validate` helpers to\n * validate unknown input data against the struct.\n */\n\nexport class Struct<T = unknown, S = unknown> {\n  readonly TYPE!: T\n  type: string\n  schema: S\n  coercer: (value: unknown, context: Context) => unknown\n  validator: (value: unknown, context: Context) => Iterable<Failure>\n  refiner: (value: T, context: Context) => Iterable<Failure>\n  entries: (\n    value: unknown,\n    context: Context\n  ) => Iterable<[string | number, unknown, Struct<any> | Struct<never>]>\n\n  constructor(props: {\n    type: string\n    schema: S\n    coercer?: Coercer\n    validator?: Validator\n    refiner?: Refiner<T>\n    entries?: Struct<T, S>['entries']\n  }) {\n    const {\n      type,\n      schema,\n      validator,\n      refiner,\n      coercer = (value: unknown) => value,\n      entries = function* () {},\n    } = props\n\n    this.type = type\n    this.schema = schema\n    this.entries = entries\n    this.coercer = coercer\n\n    if (validator) {\n      this.validator = (value, context) => {\n        const result = validator(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.validator = () => []\n    }\n\n    if (refiner) {\n      this.refiner = (value, context) => {\n        const result = refiner(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.refiner = () => []\n    }\n  }\n\n  /**\n   * Assert that a value passes the struct's validation, throwing if it doesn't.\n   */\n\n  assert(value: unknown): asserts value is T {\n    return assert(value, this)\n  }\n\n  /**\n   * Create a value with the struct's coercion logic, then validate it.\n   */\n\n  create(value: unknown): T {\n    return create(value, this)\n  }\n\n  /**\n   * Check if a value passes the struct's validation.\n   */\n\n  is(value: unknown): value is T {\n    return is(value, this)\n  }\n\n  /**\n   * Mask a value, coercing and validating it, but returning only the subset of\n   * properties defined by the struct's schema.\n   */\n\n  mask(value: unknown): T {\n    return mask(value, this)\n  }\n\n  /**\n   * Validate a value with the struct's validation logic, returning a tuple\n   * representing the result.\n   *\n   * You may optionally pass `true` for the `withCoercion` argument to coerce\n   * the value before attempting to validate it. If you do, the result will\n   * contain the coerced result when successful.\n   */\n\n  validate(\n    value: unknown,\n    options: {\n      coerce?: boolean\n    } = {}\n  ): [StructError, undefined] | [undefined, T] {\n    return validate(value, this, options)\n  }\n}\n\n/**\n * Assert that a value passes a struct, throwing if it doesn't.\n */\n\nexport function assert<T, S>(\n  value: unknown,\n  struct: Struct<T, S>\n): asserts value is T {\n  const result = validate(value, struct)\n\n  if (result[0]) {\n    throw result[0]\n  }\n}\n\n/**\n * Create a value with the coercion logic of struct and validate it.\n */\n\nexport function create<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Mask a value, returning only the subset of properties defined by a struct.\n */\n\nexport function mask<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true, mask: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Check if a value passes a struct.\n */\n\nexport function is<T, S>(value: unknown, struct: Struct<T, S>): value is T {\n  const result = validate(value, struct)\n  return !result[0]\n}\n\n/**\n * Validate a value against a struct, returning an error if invalid, or the\n * value (with potential coercion) if valid.\n */\n\nexport function validate<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): [StructError, undefined] | [undefined, T] {\n  const tuples = run(value, struct, options)\n  const tuple = shiftIterator(tuples)!\n\n  if (tuple[0]) {\n    const error = new StructError(tuple[0], function* () {\n      for (const t of tuples) {\n        if (t[0]) {\n          yield t[0]\n        }\n      }\n    })\n\n    return [error, undefined]\n  } else {\n    const v = tuple[1]\n    return [undefined, v]\n  }\n}\n\n/**\n * A `Context` contains information about the current location of the\n * validation inside the initial input value.\n */\n\nexport type Context = {\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * A type utility to extract the type from a `Struct` class.\n */\n\nexport type Infer<T extends Struct<any, any>> = T['TYPE']\n\n/**\n * A type utility to describe that a struct represents a TypeScript type.\n */\n\nexport type Describe<T> = Struct<T, StructSchema<T>>\n\n/**\n * A `Result` is returned from validation functions.\n */\n\nexport type Result =\n  | boolean\n  | string\n  | Partial<Failure>\n  | Iterable<boolean | string | Partial<Failure>>\n\n/**\n * A `Coercer` takes an unknown value and optionally coerces it.\n */\n\nexport type Coercer<T = unknown> = (value: T, context: Context) => unknown\n\n/**\n * A `Validator` takes an unknown value and validates it.\n */\n\nexport type Validator = (value: unknown, context: Context) => Result\n\n/**\n * A `Refiner` takes a value of a known type and validates it against a further\n * constraint.\n */\n\nexport type Refiner<T> = (value: T, context: Context) => Result\n","import { Struct, Context, Validator } from '../struct'\nimport { object, optional } from './types'\nimport { ObjectSchema, Assign, ObjectType, PartialObjectSchema } from '../utils'\n\n/**\n * Create a new struct that combines the properties properties from multiple\n * object structs.\n *\n * Like JavaScript's `Object.assign` utility.\n */\n\nexport function assign<A extends ObjectSchema, B extends ObjectSchema>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>\n): Struct<ObjectType<Assign<A, B>>, Assign<A, B>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>\n): Struct<ObjectType<Assign<Assign<A, B>, C>>, Assign<Assign<A, B>, C>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>\n): Struct<\n  ObjectType<Assign<Assign<Assign<A, B>, C>, D>>,\n  Assign<Assign<Assign<A, B>, C>, D>\n>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema,\n  E extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>,\n  E: Struct<ObjectType<E>, E>\n): Struct<\n  ObjectType<Assign<Assign<Assign<Assign<A, B>, C>, D>, E>>,\n  Assign<Assign<Assign<Assign<A, B>, C>, D>, E>\n>\nexport function assign(...Structs: Struct<any>[]): any {\n  const schemas = Structs.map((s) => s.schema)\n  const schema = Object.assign({}, ...schemas)\n  return object(schema)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n */\n\nexport function define<T>(name: string, validator: Validator): Struct<T, null> {\n  return new Struct({ type: name, schema: null, validator })\n}\n\n/**\n * Create a new struct based on an existing struct, but the value is allowed to\n * be `undefined`. `log` will be called if the value is not `undefined`.\n */\n\nexport function deprecated<T>(\n  struct: Struct<T>,\n  log: (value: unknown, ctx: Context) => void\n): Struct<T> {\n  return new Struct({\n    ...struct,\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n    validator(value, ctx) {\n      if (value === undefined) {\n        return true\n      } else {\n        log(value, ctx)\n        return struct.validator(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Create a struct with dynamic validation logic.\n *\n * The callback will receive the value currently being validated, and must\n * return a struct object to validate it with. This can be useful to model\n * validation logic that changes based on its input.\n */\n\nexport function dynamic<T>(\n  fn: (value: unknown, ctx: Context) => Struct<T, any>\n): Struct<T, null> {\n  return new Struct({\n    type: 'dynamic',\n    schema: null,\n    *entries(value, ctx) {\n      const struct = fn(value, ctx)\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a struct with lazily evaluated validation logic.\n *\n * The first time validation is run with the struct, the callback will be called\n * and must return a struct object to use. This is useful for cases where you\n * want to have self-referential structs for nested data structures to avoid a\n * circular definition problem.\n */\n\nexport function lazy<T>(fn: () => Struct<T, any>): Struct<T, null> {\n  let struct: Struct<T, any> | undefined\n  return new Struct({\n    type: 'lazy',\n    schema: null,\n    *entries(value, ctx) {\n      struct ??= fn()\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      struct ??= fn()\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      struct ??= fn()\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a new struct based on an existing object struct, but excluding\n * specific properties.\n *\n * Like TypeScript's `Omit` utility.\n */\n\nexport function omit<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Omit<S, K>>, Omit<S, K>> {\n  const { schema } = struct\n  const subschema: any = { ...schema }\n\n  for (const key of keys) {\n    delete subschema[key]\n  }\n\n  return object(subschema as Omit<S, K>)\n}\n\n/**\n * Create a new struct based on an existing object struct, but with all of its\n * properties allowed to be `undefined`.\n *\n * Like TypeScript's `Partial` utility.\n */\n\nexport function partial<S extends ObjectSchema>(\n  struct: Struct<ObjectType<S>, S> | S\n): Struct<ObjectType<PartialObjectSchema<S>>, PartialObjectSchema<S>> {\n  const schema: any =\n    struct instanceof Struct ? { ...struct.schema } : { ...struct }\n\n  for (const key in schema) {\n    schema[key] = optional(schema[key])\n  }\n\n  return object(schema) as any\n}\n\n/**\n * Create a new struct based on an existing object struct, but only including\n * specific properties.\n *\n * Like TypeScript's `Pick` utility.\n */\n\nexport function pick<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Pick<S, K>>, Pick<S, K>> {\n  const { schema } = struct\n  const subschema: any = {}\n\n  for (const key of keys) {\n    subschema[key] = schema[key]\n  }\n\n  return object(subschema as Pick<S, K>)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n *\n * @deprecated This function has been renamed to `define`.\n */\n\nexport function struct<T>(name: string, validator: Validator): Struct<T, null> {\n  console.warn(\n    'superstruct@0.11 - The `struct` helper has been renamed to `define`.'\n  )\n\n  return define(name, validator)\n}\n","import { Infer, Struct } from '../struct'\nimport { define } from './utilities'\nimport {\n  TupleSchema,\n  ObjectSchema,\n  ObjectType,\n  print,\n  run,\n  isObject,\n} from '../utils'\n\n/**\n * Ensure that any value passes validation.\n */\n\nexport function any(): Struct<any, null> {\n  return define('any', () => true)\n}\n\n/**\n * Ensure that a value is an array and that its elements are of a specific type.\n *\n * Note: If you omit the element struct, the arrays elements will not be\n * iterated at all. This can be helpful for cases where performance is critical,\n * and it is preferred to using `array(any())`.\n */\n\nexport function array<T extends Struct<any>>(Element: T): Struct<Infer<T>[], T>\nexport function array(): Struct<unknown[], undefined>\nexport function array<T extends Struct<any>>(Element?: T): any {\n  return new Struct({\n    type: 'array',\n    schema: Element,\n    *entries(value) {\n      if (Element && Array.isArray(value)) {\n        for (const [i, v] of value.entries()) {\n          yield [i, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return Array.isArray(value) ? value.slice() : value\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array value, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a boolean.\n */\n\nexport function boolean(): Struct<boolean, null> {\n  return define('boolean', (value) => {\n    return typeof value === 'boolean'\n  })\n}\n\n/**\n * Ensure that a value is a valid `Date`.\n *\n * Note: this also ensures that the value is *not* an invalid `Date` object,\n * which can occur when parsing a date fails but still returns a `Date`.\n */\n\nexport function date(): Struct<Date, null> {\n  return define('date', (value) => {\n    return (\n      (value instanceof Date && !isNaN(value.getTime())) ||\n      `Expected a valid \\`Date\\` object, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is one of a set of potential values.\n *\n * Note: after creating the struct, you can access the definition of the\n * potential values as `struct.schema`.\n */\n\nexport function enums<T extends number>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends string>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends number | string>(values: readonly T[]): any {\n  const schema: any = {}\n  const description = values.map((v) => print(v)).join()\n\n  for (const key of values) {\n    schema[key] = key\n  }\n\n  return new Struct({\n    type: 'enums',\n    schema,\n    validator(value) {\n      return (\n        values.includes(value as any) ||\n        `Expected one of \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a function.\n */\n\nexport function func(): Struct<Function, null> {\n  return define('func', (value) => {\n    return (\n      typeof value === 'function' ||\n      `Expected a function, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an instance of a specific class.\n */\n\nexport function instance<T extends { new (...args: any): any }>(\n  Class: T\n): Struct<InstanceType<T>, null> {\n  return define('instance', (value) => {\n    return (\n      value instanceof Class ||\n      `Expected a \\`${Class.name}\\` instance, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an integer.\n */\n\nexport function integer(): Struct<number, null> {\n  return define('integer', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value) && Number.isInteger(value)) ||\n      `Expected an integer, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value matches all of a set of types.\n */\n\nexport function intersection<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function intersection<A, B>(\n  Structs: TupleSchema<[A, B]>\n): Struct<A & B, null>\nexport function intersection<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A & B & C, null>\nexport function intersection<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A & B & C & D, null>\nexport function intersection<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A & B & C & D & E, null>\nexport function intersection<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A & B & C & D & E & F, null>\nexport function intersection<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A & B & C & D & E & F & G, null>\nexport function intersection<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A & B & C & D & E & F & G & H, null>\nexport function intersection<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A & B & C & D & E & F & G & H & I, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A & B & C & D & E & F & G & H & I & J, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P & Q,\n  null\n>\nexport function intersection(Structs: Array<Struct<any, any>>): any {\n  return new Struct({\n    type: 'intersection',\n    schema: null,\n    *entries(value, ctx) {\n      for (const S of Structs) {\n        yield* S.entries(value, ctx)\n      }\n    },\n    *validator(value, ctx) {\n      for (const S of Structs) {\n        yield* S.validator(value, ctx)\n      }\n    },\n    *refiner(value, ctx) {\n      for (const S of Structs) {\n        yield* S.refiner(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Ensure that a value is an exact value, using `===` for comparison.\n */\n\nexport function literal<T extends boolean>(constant: T): Struct<T, T>\nexport function literal<T extends number>(constant: T): Struct<T, T>\nexport function literal<T extends string>(constant: T): Struct<T, T>\nexport function literal<T>(constant: T): Struct<T, null>\nexport function literal<T>(constant: T): any {\n  const description = print(constant)\n  const t = typeof constant\n  return new Struct({\n    type: 'literal',\n    schema:\n      t === 'string' || t === 'number' || t === 'boolean' ? constant : null,\n    validator(value) {\n      return (\n        value === constant ||\n        `Expected the literal \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `Map` object, and that its keys and values are of\n * specific types.\n */\n\nexport function map(): Struct<Map<unknown, unknown>, null>\nexport function map<K, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Map<K, V>, null>\nexport function map<K, V>(Key?: Struct<K>, Value?: Struct<V>): any {\n  return new Struct({\n    type: 'map',\n    schema: null,\n    *entries(value) {\n      if (Key && Value && value instanceof Map) {\n        for (const [k, v] of value.entries()) {\n          yield [k as string, k, Key]\n          yield [k as string, v, Value]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Map ? new Map(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Map ||\n        `Expected a \\`Map\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that no value ever passes validation.\n */\n\nexport function never(): Struct<never, null> {\n  return define('never', () => false)\n}\n\n/**\n * Augment an existing struct to allow `null` values.\n */\n\nexport function nullable<T, S>(struct: Struct<T, S>): Struct<T | null, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) => value === null || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === null || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is a number.\n */\n\nexport function number(): Struct<number, null> {\n  return define('number', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value)) ||\n      `Expected a number, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an object, that is has a known set of properties,\n * and that its properties are of specific types.\n *\n * Note: Unrecognized properties will fail validation.\n */\n\nexport function object(): Struct<Record<string, unknown>, null>\nexport function object<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S>\nexport function object<S extends ObjectSchema>(schema?: S): any {\n  const knowns = schema ? Object.keys(schema) : []\n  const Never = never()\n  return new Struct({\n    type: 'object',\n    schema: schema ? schema : null,\n    *entries(value) {\n      if (schema && isObject(value)) {\n        const unknowns = new Set(Object.keys(value))\n\n        for (const key of knowns) {\n          unknowns.delete(key)\n          yield [key, value[key], schema[key]]\n        }\n\n        for (const key of unknowns) {\n          yield [key, value[key], Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n    coercer(value) {\n      return isObject(value) ? { ...value } : value\n    },\n  })\n}\n\n/**\n * Augment a struct to allow `undefined` values.\n */\n\nexport function optional<T, S>(struct: Struct<T, S>): Struct<T | undefined, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) =>\n      value === undefined || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is an object with keys and values of specific types, but\n * without ensuring any specific shape of properties.\n *\n * Like TypeScript's `Record` utility.\n */\n\nexport function record<K extends string, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Record<K, V>, null> {\n  return new Struct({\n    type: 'record',\n    schema: null,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k in value) {\n          const v = value[k]\n          yield [k, k, Key]\n          yield [k, v, Value]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `RegExp`.\n *\n * Note: this does not test the value against the regular expression! For that\n * you need to use the `pattern()` refinement.\n */\n\nexport function regexp(): Struct<RegExp, null> {\n  return define('regexp', (value) => {\n    return value instanceof RegExp\n  })\n}\n\n/**\n * Ensure that a value is a `Set` object, and that its elements are of a\n * specific type.\n */\n\nexport function set(): Struct<Set<unknown>, null>\nexport function set<T>(Element: Struct<T>): Struct<Set<T>, null>\nexport function set<T>(Element?: Struct<T>): any {\n  return new Struct({\n    type: 'set',\n    schema: null,\n    *entries(value) {\n      if (Element && value instanceof Set) {\n        for (const v of value) {\n          yield [v as string, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Set ? new Set(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Set ||\n        `Expected a \\`Set\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a string.\n */\n\nexport function string(): Struct<string, null> {\n  return define('string', (value) => {\n    return (\n      typeof value === 'string' ||\n      `Expected a string, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is a tuple of a specific length, and that each of its\n * elements is of a specific type.\n */\n\nexport function tuple<A>(Structs: TupleSchema<[A]>): Struct<[A], null>\nexport function tuple<A, B>(Structs: TupleSchema<[A, B]>): Struct<[A, B], null>\nexport function tuple<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<[A, B, C], null>\nexport function tuple<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<[A, B, C, D], null>\nexport function tuple<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<[A, B, C, D, E], null>\nexport function tuple<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<[A, B, C, D, E, F], null>\nexport function tuple<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<[A, B, C, D, E, F, G], null>\nexport function tuple<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<[A, B, C, D, E, F, G, H], null>\nexport function tuple<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<[A, B, C, D, E, F, G, H, I], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<[A, B, C, D, E, F, G, H, I, J], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q], null>\nexport function tuple(Elements: Struct<any>[]): any {\n  const Never = never()\n\n  return new Struct({\n    type: 'tuple',\n    schema: null,\n    *entries(value) {\n      if (Array.isArray(value)) {\n        const length = Math.max(Elements.length, value.length)\n\n        for (let i = 0; i < length; i++) {\n          yield [i, value[i], Elements[i] || Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value has a set of known properties of specific types.\n *\n * Note: Unrecognized properties are allowed and untouched. This is similar to\n * how TypeScript's structural typing works.\n */\n\nexport function type<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S> {\n  const keys = Object.keys(schema)\n  return new Struct({\n    type: 'type',\n    schema,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k of keys) {\n          yield [k, value[k], schema[k]]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value matches one of a set of types.\n */\n\nexport function union<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function union<A, B>(Structs: TupleSchema<[A, B]>): Struct<A | B, null>\nexport function union<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A | B | C, null>\nexport function union<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A | B | C | D, null>\nexport function union<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A | B | C | D | E, null>\nexport function union<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A | B | C | D | E | F, null>\nexport function union<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A | B | C | D | E | F | G, null>\nexport function union<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A | B | C | D | E | F | G | H, null>\nexport function union<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A | B | C | D | E | F | G | H | I, null>\nexport function union<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A | B | C | D | E | F | G | H | I | J, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q,\n  null\n>\nexport function union(Structs: Struct<any>[]): any {\n  const description = Structs.map((s) => s.type).join(' | ')\n  return new Struct({\n    type: 'union',\n    schema: null,\n    validator(value, ctx) {\n      const failures = []\n\n      for (const S of Structs) {\n        const [...tuples] = run(value, S, ctx)\n        const [first] = tuples\n\n        if (!first[0]) {\n          return []\n        } else {\n          for (const [failure] of tuples) {\n            if (failure) {\n              failures.push(failure)\n            }\n          }\n        }\n      }\n\n      return [\n        `Expected the value to satisfy a union of \\`${description}\\`, but received: ${print(\n          value\n        )}`,\n        ...failures,\n      ]\n    },\n  })\n}\n\n/**\n * Ensure that any value passes validation, without widening its type to `any`.\n */\n\nexport function unknown(): Struct<unknown, null> {\n  return define('unknown', () => true)\n}\n","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _toArray(arr) {\n  return arrayWithHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableRest();\n}","import { Struct, is, Coercer } from '../struct'\nimport { isPlainObject } from '../utils'\nimport { string, unknown } from './types'\n\n/**\n * Augment a `Struct` to add an additional coercion step to its input.\n *\n * This allows you to transform input data before validating it, to increase the\n * likelihood that it passes validation—for example for default values, parsing\n * different formats, etc.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function coerce<T, S, C>(\n  struct: Struct<T, S>,\n  condition: Struct<C, any>,\n  coercer: Coercer<C>\n): Struct<T, S> {\n  return new Struct({\n    ...struct,\n    coercer: (value, ctx) => {\n      return is(value, condition)\n        ? struct.coercer(coercer(value, ctx), ctx)\n        : struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Augment a struct to replace `undefined` values with a default.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function defaulted<T, S>(\n  struct: Struct<T, S>,\n  fallback: any,\n  options: {\n    strict?: boolean\n  } = {}\n): Struct<T, S> {\n  return coerce(struct, unknown(), (x) => {\n    const f = typeof fallback === 'function' ? fallback() : fallback\n\n    if (x === undefined) {\n      return f\n    }\n\n    if (!options.strict && isPlainObject(x) && isPlainObject(f)) {\n      const ret = { ...x }\n      let changed = false\n\n      for (const key in f) {\n        if (ret[key] === undefined) {\n          ret[key] = f[key]\n          changed = true\n        }\n      }\n\n      if (changed) {\n        return ret\n      }\n    }\n\n    return x\n  })\n}\n\n/**\n * Augment a struct to trim string inputs.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function trimmed<T, S>(struct: Struct<T, S>): Struct<T, S> {\n  return coerce(struct, string(), (x) => x.trim())\n}\n"],"sourceRoot":""}